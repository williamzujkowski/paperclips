This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
docs/
  combat.js
  globals.js
  index.html
  index2.html
  interface.css
  main.js
  projects.js
  titlescreen.css
mirror.sh
README.md
serve.sh
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="docs/combat.js">
var battleGRID_WIDTH=31; //number of grid cells
⋮----
var battleDEATH_THRESHOLD = 0.5; //used to calculate battles
⋮----
var ships = new Array();
⋮----
var grid = new Array(battleGRID_HEIGHT);
⋮----
//NON-CANVAS BATTLE LOGIC
⋮----
function checkForBattles(){
⋮----
var r = (Math.random()*100);
⋮----
createBattle();
⋮----
battleNumbers.push(1);
⋮----
function generateBattleName(){
var x = Math.floor(Math.random()*battleNames.length);
⋮----
/*

function battleWrite(newBattle){
    
    var element = document.getElementById("battleReportsDiv"); 
    var reference = document.getElementById("battleListTop");
    
    var newBattleReport = document.createElement("div");
    newBattleReport.setAttribute("id", "battleReport"+newBattle.id);
    
    var battleNameP = document.createElement("p");
    battleNameP.setAttribute("class", "clean");
    
    if (battleNameFlag == 0){
        battleName = document.createTextNode("Battle "+newBattle.id);

        }
    
    if (battleNameFlag == 1){
        battleName = document.createTextNode(generateBattleName());
        }
    
    battleNameP.appendChild(battleName);
    
    newBattleReport.appendChild(battleNameP);
    
    var battleDetailsP = document.createElement("p");
    battleDetailsP.setAttribute("class", "clean");
    
    var clipsLabelSpan = document.createElement("span");
    clipsLabelSpan.style.fontWeight = "bold";
    
    var clipsLabel = document.createTextNode("Clips: ");
    clipsLabelSpan.appendChild(clipsLabel);
    
    battleDetailsP.appendChild(clipsLabelSpan);
    
    var clipProbeCountSpan = document.createElement("span");
    clipProbeCountSpan.setAttribute("id", "battle"+newBattle.id+"clipCount")
    var clipProbeCount = document.createTextNode(numberCruncher(newBattle.clipProbes));
    clipProbeCountSpan.appendChild(clipProbeCount);
    battleDetailsP.appendChild(clipProbeCountSpan);
    
    var driftersLabelSpan = document.createElement("span");
    driftersLabelSpan.style.fontWeight = "bold";
    
    var driftersLabel = document.createTextNode(" Drifters: ");
    driftersLabelSpan.appendChild(driftersLabel);
    
    battleDetailsP.appendChild(driftersLabelSpan);
    
    var drifterProbeCountSpan = document.createElement("span");
    drifterProbeCountSpan.setAttribute("id", "battle"+newBattle.id+"drifterCount")    
    var drifterProbeCount = document.createTextNode(numberCruncher(newBattle.drifterProbes));
    drifterProbeCountSpan.appendChild(drifterProbeCount);
    battleDetailsP.appendChild(drifterProbeCountSpan);
    
    newBattleReport.appendChild(battleDetailsP);
    
    var territoryP = document.createElement("p");
    territoryP.setAttribute("class", "clean");
    var t = (newBattle.territory/availableMatter);
    var territoryDisplay = document.createTextNode("Territory at stake: "+Math.ceil(t*100)+"% of available matter");
    territoryP.appendChild(territoryDisplay);
    
    newBattleReport.appendChild(territoryP);
   
    var line = document.createElement("hr");
    newBattleReport.appendChild(line);
    
    reference.insertBefore(newBattleReport, reference.childNodes[0]);
        
    }

function updateBattles(){
    
    var combatEffectiveness = probeCombatBaseRate;
    
    if (battleNameFlag == 1) {
        combatEffectiveness = combatEffectiveness*2
    }
    
    if (attackSpeedFlag == 1){
        battleSpeed = attackSpeed * .85;
        if (battleSpeed > .99){
            battleSpeed = .99;
        }
    }
    
    for(var i = 0; i < battles.length; i++){
        r = Math.random();
        if (r>=battleSpeed) {
            var clipCasualties = battles[i].drifterProbes * drifterCombat * (1-battleSpeed);
                if (clipCasualties>battles[i].clipProbes){
                    clipCasualties=battles[i].clipProbes;
                    }
            
            battles[i].clipProbes = battles[i].clipProbes - clipCasualties;
            probeCount = probeCount - clipCasualties;
            probesLostCombat = probesLostCombat + clipCasualties;
            document.getElementById('probesLostCombatDisplay').innerHTML = numberCruncher(probesLostCombat);
            
//            document.getElementById('battle'+battles[i].id+"clipCount").innerHTML = numberCruncher(battles[i].clipProbes);
            
            } else {
            var drifterCasualties = battles[i].clipProbes * Math.pow(probeCombat, 1.7) * combatEffectiveness;
                if (drifterCasualties>battles[i].drifterProbes){
                    drifterCasualties=battles[i].drifterProbes;
                    }
            
                battles[i].drifterProbes = battles[i].drifterProbes - drifterCasualties;
                drifterCount = drifterCount - drifterCasualties;
                
//                document.getElementById('battle'+battles[i].id+"drifterCount").innerHTML = numberCruncher(battles[i].drifterProbes);
            }
        
        if (battles[i].drifterProbes < 1){
            battles[i].victory = true;
        }
    
        if (battles[i].clipProbes < 1 && battles[i].victory == false){
            battles[i].loss = true;
        }

        if (battles[i].loss == true && battles[i].whiteFlag == 0){
            availableMatter = availableMatter - battles[i].territory;
            battles[i].whiteFlag = 1;
        }     
        
        if (battles[i].loss == true){
            
//            document.getElementById("battleReport"+battles[i].id).style.backgroundColor = "LightGrey";
            
            battles[i].reportCount++;
            if (battles[i].reportCount > outcomeTimer){
                battles[i].garbageFlag = 1;
            }
        }
        
        if (battles[i].victory == true){
            battles[i].reportCount++;
            if (battles[i].reportCount > outcomeTimer){
                battles[i].garbageFlag = 1;
            }
        }
    }
}

function battleCleanUp(){
    for(var i = battles.length-1; i >= 0; i--){
        if (battles[i].garbageFlag == 1){
            var element = document.getElementById('battleReport'+battles[i].id);
            element.parentNode.removeChild(element);
            battles.splice(i,1);
        }
    }
    
}



function updateBattleDisplay(battle){
    
    

 var element = document.getElementById("battleListTop"); 
    
    var newBattle = document.createElement("div");
    newBattle.setAttribute("id", battle.id);
    element.appendChild(newBattle, element.firstChild);
    
    var span = document.createElement("span");
    span.setAttribute("class", "clean");    
    span.style.fontWeight = "bold";
    newBattle.appendChild(span);
    
    var hed = document.createTextNode("Combatants");
    span.appendChild(hed);    
    
    var clipsCount = document.createElement("span");
    clipsCount = battle.clipProbes;
    element.appendChild(span);
    
}

*/
⋮----
//CANVAS BATTLE DISPLAY
⋮----
function Battle(){
⋮----
battleRestart();
⋮----
canvas  = document.getElementById("canvas");
⋮----
context = canvas.getContext('2d');
⋮----
var interval = setInterval(Update, 16);
⋮----
ClearFrame();
UpdateGrid();
MoveShips();
DoCombat();
⋮----
function checkForBattleEnd(){
⋮----
document.getElementById("victoryDiv").style.visibility = "visible";
⋮----
document.getElementById("battleResult").innerHTML = "DEFEAT";
document.getElementById("battleResultSign").innerHTML = "-";
document.getElementById("honorAmount").innerHTML = battleLEFTSHIPS;
document.getElementById("honorDisplay").innerHTML = Math.round(honor).toLocaleString();
⋮----
document.getElementById("honorAmount").innerHTML = honorReward;
⋮----
document.getElementById("battleResult").innerHTML = "VICTORY";
document.getElementById("battleResultSign").innerHTML = "+";
⋮----
endBattle();
⋮----
function endBattle(){
document.getElementById("victoryDiv").style.visibility = "hidden";
⋮----
battles.splice(0,1);
⋮----
function battleRestart(){
⋮----
ships = new Array();
grid = new Array(battleGRID_HEIGHT);
⋮----
//reset the grid
⋮----
grid[row]= new Array();
⋮----
grid[row][col]= new Cell();
⋮----
//create ships... alternate left team and right team so there's no advantage
//for array position
⋮----
ships[i] = new Ship(0);
⋮----
ships[i] = new Ship(1);
⋮----
//First clear grid out
⋮----
//Update Grid cells with ships in each cell
⋮----
//figure out which grid cell the ship is in
⋮----
p.gx = Math.floor(p.x * battleINV_GRID_WIDTH);
p.gy = Math.floor(p.y * battleINV_GRID_HEIGHT);
⋮----
grid[p.gy][p.gx].add(p); //add ship to this grid cell
⋮----
//        if (battleNameFlag == 1){
//        pX = pX*2;
//        }
⋮----
//First Check if there are enough ships in this cell to do combat
⋮----
//Now count how many ships for each team in this cell;
⋮----
//now we have at least one ship of each team in this cell.
//roll a weighted die to see if each ship gets killed
⋮----
diceRoll = Math.random() * dX * ((numRightTeam/numLeftTeam)*.5);
⋮----
// console.log("Probe Death Check. dX = "+dX+". diceRoll = "+diceRoll+". deathThreshold = "+battleDEATH_THRESHOLD);
⋮----
diceRoll = ((Math.random() * pX) + (probeCombat * .1)) * ((numLeftTeam/numRightTeam)*.5);
// console.log("Drifter Death Check. pX = "+pX+". diceRoll = "+diceRoll+". deathThreshold = "+battleDEATH_THRESHOLD);
⋮----
document.getElementById('probesLostCombatDisplay').innerHTML = numberCruncher(probesLostCombat);
⋮----
document.getElementById('driftersKilled').innerHTML = numberCruncher(driftersKilled);
document.getElementById('drifterCount').innerHTML = numberCruncher(drifterCount);
⋮----
checkForBattleEnd();
⋮----
var centroid = FindCentroid();
⋮----
//draw explosion
⋮----
context.fillRect(p.x -3, p.y -3,7,7); //big square for one frame
⋮----
context.fillRect(p.x -1, p.y -1,3,3); //little square for 1 frame
⋮----
//4 little pixel squares moving out from the point of explosion
context.fillRect(p.x + p.framesDead, p.y + p.framesDead,1,1);
context.fillRect(p.x - p.framesDead, p.y + p.framesDead,1,1);
context.fillRect(p.x + p.framesDead, p.y - p.framesDead,1,1);
context.fillRect(p.x - p.framesDead, p.y - p.framesDead,1,1);
⋮----
MoveSingleShip(p,centroid);
⋮----
context.fillRect(p.x - 1, p.y - 1, 2, 2);
⋮----
//find the statistical center of all the ships
⋮----
//give some tendency to center, so they bunch in the middle
⋮----
//accelerate to group centroid
⋮----
//accelerate to enemy ships in adjacent grid cells
⋮----
for (row=Math.max(p.gy-1,0); row<Math.min(p.gy+2,battleGRID_HEIGHT);row++){
for(col=Math.max(p.gx-1,0);col<Math.min(p.gx+2,battleGRID_WIDTH);col++){
⋮----
if (!othership.alive) continue; //ignore dead ships
⋮----
if (teammatesConsidered>3) continue;//don't fixate on teammates
⋮----
//mild acceleration to match teammates
⋮----
//mild acceleration to get space from teammates
⋮----
p.vx += (othership.x - p.x) *0.2; // acceleration toward enemies
⋮----
//limit speed to max
if (Math.abs(p.vx) > battleMAXSPEED) p.vx = p.vx < 0 ? -battleMAXSPEED : battleMAXSPEED;
if (Math.abs(p.vy) > battleMAXSPEED) p.vy = p.vy < 0 ? -battleMAXSPEED : battleMAXSPEED;
⋮----
//move the ship
/*p.vx += Math.random() * .1;
    p.vx += Math.random() * .1;
    p.vx -= Math.random() * .1;
    p.vx -= Math.random() * .1;*/
⋮----
//bounce off edges
⋮----
//Clear the screen,
//	var MouseDown = function(e) {
//		e.preventDefault();
//		battleRestart();
//	}
⋮----
//        var ctx = canvas.getContext("2d");
//        ctx.font = "16px Times";
//        ctx.fillStyle="white";
//        ctx.fillText("Combat",10,20);
⋮----
//Grid cells for quicker grouping
function Cell(){
this.ships = new Array();
⋮----
function Ship(team){
⋮----
//grid cell coord - we'll set this later
⋮----
this.x = (Math.random()*0.2) * battleWIDTH;
this.y = Math.random() * battleHEIGHT;
this.vx = Math.random() * battleMAXSPEED;
this.vy = Math.random()-0.5;
⋮----
this.x = (Math.random()*0.2+0.8) * battleWIDTH;
⋮----
this.vx = -1* Math.random() * battleMAXSPEED;
this.vy =Math.random()-0.5;
⋮----
function createBattle(){
⋮----
document.getElementById('battleScale').innerHTML = numberCruncher(unitSize,0);
⋮----
var rr = Math.random()*drifterCount;
⋮----
var ss = Math.random()*probeCount;
⋮----
var tt = Math.random()*availableMatter;
⋮----
battleLEFTSHIPS = Math.ceil(ss / 1000000);
⋮----
var hinder = Math.random();
⋮----
battleLEFTSHIPS = Math.ceil(Math.random()*175);
⋮----
battleRIGHTSHIPS = Math.ceil(rr / 1000000);
⋮----
Battle();
⋮----
battleName = generateBattleName();
⋮----
document.getElementById('battleName').innerHTML = battleName;
⋮----
battles.push(newBattle);
⋮----
//  battleWrite(newBattle);
⋮----
var app = new Battle();
app.initialize();
</file>

<file path="docs/globals.js">
var availableMatter = Math.pow(10, 24)*6000;
⋮----
var totalMatter = Math.pow(10, 54)*30;
⋮----
var threnodyAudio = new Audio();
</file>

<file path="docs/index.html">
<html>
    <head>
    <link rel="stylesheet" type="text/css" href="titlescreen.css" />
        <!-- Global Site Tag (gtag.js) - Google Analytics -->
        <script async src="https://www.googletagmanager.com/gtag/js?id=UA-107491380-1"></script>
        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments)};
            gtag('js', new Date());
            gtag('config', 'UA-107491380-1');
            gtag('set', {'user_id': 'USER_ID'}); // Set the user ID using signed-in user_id.
        </script>
    </head>
    
    <body>
    
<div class="frame" id="wrapper" style=" position:absolute; top:0; bottom:0; left:0; right:0; border: width:100%; text-align:center; vertical-align:middle; margin:auto">    
    
<a href=index2.html>    
    
<img src="title.png" alt="Universal Paperclips" height="355" width="453">


</a>

</div>
    
    </body>
</file>

<file path="docs/index2.html">
<html>
    <head>
        <link rel="stylesheet" type="text/css" href="interface.css" />
    </head>
    
    <body>
        
<!--     <audio id="threnody1">
        <source src="test.mp3" type="audio/mpeg">
        
    </audio>   -->  
        
    <div id="page">
        
    <div id="cover">
    </div>    
        
        <div id="hypnoDroneEventDiv">
            <p class = "hypnoDrone"><span id = hypnoDroneText></span></p>  
        </div>
        
        <div id="consoleDiv">

            <p class = "consoleOld"> 
                <span>&nbsp;.&nbsp;</span><span id="readout5"></span><br />
                <span>&nbsp;.&nbsp;</span><span id="readout4"></span><br />
                <span>&nbsp;.&nbsp;</span><span id="readout3"></span><br />
                <span>&nbsp;.&nbsp;</span><span id="readout2"></span><br />
            </p>
            <p class = "console"> 
                <span>&nbsp;>&nbsp;</span><span id="readout1">Welcome to Universal Paperclips</span><span id="cursor" class = "pulsate">|</span>
            </p>
            
        </div> 
        
        <div id="topDiv">
            
            <div id="prestigeDiv">
            
            &nbsp;Universe: <span id = "prestigeUcounter">0</span> / Sim Level: <span id = "prestigeScounter">0</span>
            
            </div>        
        <div class = "toolTip">
        <span id = "clipCountCrunched" class = "toolTipText">total clips produced</span>    
        <h2>Paperclips: <span id="clips">0</span></h2>
        </div>
            
        </div>    
            
        <div id="leftColumn">
        
        <button class = "button2" id ="btnMakePaperclip" onclick="clipClick(1)">Make Paperclip</button><br />
        <br />
        
        <div id = "creationDiv">
        
        <b>Manufacturing</b><br />
        <hr>
        <div id = factoryUpgradeDisplay>
        <p class = "clean">
        Next Upgrade at: <span id = "nextFactoryUpgrade">0</span> Factories <br />  
        </p>    
        </div>  
        
        <div id = "clipsPerSecDiv">
        Clips per Second: <span id="clipmakerRate2">0</span><br />
        </div>        
        
        <div id = "tothDiv">    
        Unused Clips: <span id="unusedClipsDisplay">0</span><br />
        </div>
        <br /> 
           
            
        <div id = "factoryDiv">
        <p class = "engineText5">
        <button class = "button2" id = "btnMakeFactory"
        onclick="makeFactory()">Clip Factory</button> <span class = "engineText6" id="factoryLevelDisplay">0</span></p>
            
        <div class = "toolTip3">    
            
        <span id = "factoryRebootToolTip" class = "toolTipText3">0</span>    
            
        <button class = "button2" id = "btnFactoryReboot" onclick="factoryReboot()">&nbsp Disassemble All &nbsp</button>
        
        </div>    
        <br />    
            
        Cost: <span id="factoryCostDisplay">0</span> clips<br />
        <br />
        </div>
            
        <div id="wireTransDiv">
        Wire: <span id="transWire">0</span> <span id = "inchSpan">inches</span><br />
        </div>      
            
        <div id = "factoryDivSpace">
        Factories: <span id="factoryLevelDisplaySpace">0</span><br /><br />     
        </div>    
            
        </div>   
            
        <div id="wireProductionDiv">
            
        <b>Wire Production</b><br />
        <hr>  
        <div id = droneUpgradeDisplay>
        <p class = "clean">
        Next Upgrade at: <span id = "nextDroneUpgrade">0</span> Drones <br />  
        </p>        
        </div>    
            
        Available Matter: <span id="availableMatterDisplay">0</span> g<br />
        <div id="mdpsDiv">(<span id="mdps">0</span> g per sec)<br /></div>     
        Acquired Matter: <span id="acquiredMatterDisplay">0</span> g<br />
        (<span id="maps">0</span> g per sec)<br />        
        Wire: <span id="nanoWire">0</span> inches<br />
        (<span id="wpps">0</span> inches per sec) <br />    
        <br />
            
        <div id = "harvesterDiv">
            
        <p class = "engineText5">
        <button class = "button2" id = "btnMakeHarvester"
        onclick="makeHarvester(1)">&nbsp Harvester Drone &nbsp</button> 
        <span class = "engineText6" id="harvesterLevelDisplay">0</span>
        </p>
            
        <div id = "harvesterMultiButtons">    
            
        <p class = "engineText5">    
        <button class = "button2" id = "btnHarvesterx10" onclick="makeHarvester(10)">+10</button>
        <button class = "button2" id = "btnHarvesterx100" onclick="makeHarvester(100)">+100</button>   
        <button class = "button2" id = "btnHarvesterx1000" onclick="makeHarvester(1000)">+1k</button>  
        </p>
            
        </div>    
            
        <div class = "toolTip3">    
            
        <span id = "harvesterRebootToolTip" class = "toolTipText3">0</span>     
            
        <button class = "button2" id = "btnHarvesterReboot" onclick="harvesterReboot()">&nbsp Disassemble All &nbsp</button>
            
        </div>    
        <br />    
            
        Cost: <span id="harvesterCostDisplay">0</span> clips<br /><br />
        
        </div> 
            
        <div id = "wireDroneDiv">
        <p class = "engineText5">
        <button class = "button2" id = "btnMakeWireDrone"
        onclick="makeWireDrone(1)">&nbsp &nbsp &nbsp Wire Drone &nbsp &nbsp</button> <span class = "engineText6" id="wireDroneLevelDisplay">0</span></p>
            
        <div id = "wireDroneMultiButtons">    
            
        <p class = "engineText5">
        <button class = "button2" id = "btnWireDronex10" onclick="makeWireDrone(10)">+10</button>
        <button class = "button2" id = "btnWireDronex100" onclick="makeWireDrone(100)">+100</button>   
        <button class = "button2" id = "btnWireDronex1000" onclick="makeWireDrone(1000)">+1k</button></p>
        </div>    
            
        <div class = "toolTip3">    
            
        <span id = "wireDroneRebootToolTip" class = "toolTipText3">0</span>    
          
        <button class = "button2" id = "btnWireDroneReboot" onclick="wireDroneReboot()">&nbsp Disassemble All &nbsp</button>
            
        </div>    
        <br />    
            
        Cost: <span id="wireDroneCostDisplay">0</span> clips<br />
        <br />
        </div>  
            
        <div id = "droneDivSpace">
            
        Harvester Drones: <span id = "harvesterLevelSpace">0</span><br />
        Wire Drones: <span id = "wireDroneLevelSpace">0</span><br /><br /> 
        
        </div>     
            
        </div>   
            
        <div id="spaceDiv">
            
        <b>Space Exploration</b><br />
        <hr>  
        
        <span id="colonizedDisplay">0</span>% of universe explored<br />
        <br />
            
        <div id = "probeDiv">
        <p class = "engineText5">
        <button class = "button2" id = "btnMakeProbe"
        onclick="makeProbe()">Launch Probe</button><br />
        Cost: <span id="probeCostDisplay">0</span> clips<br />
        <br />
        </div>   
        
        Launched: <span id="probesLaunchedDisplay">0</span><br />    
        Descendents: <span id="probesBornDisplay">0</span><br />  
        <br />
            
        <div id = "hazardBodyCount">Lost to hazards: (<span id="probesLostHazardsDisplay">0</span>)<br /></div>
        <div id = "driftBodyCount">Lost to value drift: (<span id="probesLostDriftDisplay">0</span>)<br /></div>
        <div id = "combatBodyCount">Lost in combat: (<span id="probesLostCombatDisplay">0</span>)<br /></div>     
        
        <hr class = "short">
            
        Total: <span id="probesTotalDisplay">0</span><br /> 
        <br />
            
        <div id = "drifterDiv">
        Drifters Killed: <span id="driftersKilled">0</span><br />
        Drifters: <span id="drifterCount">0</span><br />      
        </div>    
            
        </div>    
            
            
        <div id="businessDiv">
            
        <b>Business</b><br />
        <hr>
        
            
        Available Funds: $ <span id="funds">0</span><br />
        <div id="revPerSecDiv">  
           
        Avg. Rev. per sec: $ <span id="avgRev">0</span><br />
        Avg. Clips Sold per sec: <span id="avgSales">0</span><br />    
            
        </div>  
        Unsold Inventory: <span id="unsoldClips">0</span><br /> 
            
        <button class = "button2" id = "btnLowerPrice"
        onclick="lowerPrice()">lower</button>
        <button class = "button2" id = "btnRaisePrice"
        onclick="raisePrice()">raise</button>
        Price per Clip: $ <span id="margin">.25</span><br />
            
        Public Demand: <span id="demand">10</span>%<br />
        <br />    
        
        <button class = "button2" id = "btnExpandMarketing"
        onclick="buyAds()">Marketing</button> <span class = "engineText6"> Level: </span><span class = "engineText6" id="marketingLvl">1</span><br />
        Cost: $ <span id="adCost">100.00</span><br />
        <br />    
        
        
            
        </div>   
        
        <div id="manufacturingDiv">
        <b>Manufacturing</b><br />
        <hr>
        
        Clips per Second: <span id="clipmakerRate">0</span><br />
        <br /> 
            
        <div id = "wireBuyerDiv">
        <button class = "button2" id ="btnToggleWireBuyer"
        onclick="toggleWireBuyer()">WireBuyer</button> <span class = "engineText6" id = "wireBuyerStatus">ON</span>    
        </div>
          
            
        <button class = "button2" id ="btnBuyWire"
        onclick="buyWire()">Wire</button> <span class = "engineText6" id="wire">1000</span><span class = "engineText6"> inches</span><br /> 
        Cost: $ <span id="wireCost">20</span><br />
        <br />
            
        <div id = "autoClipperDiv">
        <p class = "engineText5">
        <button class = "button2" id = "btnMakeClipper"
        onclick="makeClipper()">AutoClippers</button> <span class = "engineText6" id="clipmakerLevel2">0</span></p>
        Cost: $ <span id="clipperCost">5.00</span><br />
        <br />
        </div>    
            
        <div id = "megaClipperDiv">
        <p class = "engineText5">
        <button class = "button2" id = "btnMakeMegaClipper"
        onclick="makeMegaClipper()">MegaClippers</button> <span class = "engineText6" id="megaClipperLevel">0</span></p>
        Cost: $ <span id="megaClipperCost">500</span><br />
        </div>    
                  
        </div>

        <br />

           


        <button id ="save1Button" onclick="save1()">SAVE SLOT 1</button>
        <button id ="load1Button" onclick="load1()">LOAD SLOT 1</button><br /> 
        <button id ="save2Button" onclick="save2()">SAVE SLOT 2</button>
        <button id ="load2Button" onclick="load2()">LOAD SLOT 2</button><br />    
        <button id ="resetButton" onclick="reset()">RESET ALL PROGRESS</button><br />       

        <button id ="freeClipsButton" onclick="cheatClips()">Free Clips</button><br />    
        <button id ="freeMoneyButton" onclick="cheatMoney()">Free Money</button><br />
        <button id ="freeTrustButton" onclick="cheatTrust()">Free Trust</button><br />        
        <button id ="freeOpsButton" onclick="cheatOps()">Free Ops</button><br />
        <button id ="freeCreatButton" onclick="cheatCreat()">Free Creativity</button><br />
        <button id ="freeYomiButton" onclick="cheatYomi()">Free Yomi</button><br />    
        <button id ="resetPrestige" onclick="resetPrestige()">Reset Prestige</button><br />     
            
        <button id ="destroyAllHumansButton" onclick="cheatHypno()">Destroy all Humans</button><br />    
        <button id ="freePrestigeU" onclick="cheatPrestigeU()">Free Prestige U</button>
        <button id ="freePrestigeS" onclick="cheatPrestigeS()">Free Prestige S</button>
        <button id ="debugBattleNumbers" onclick="setB()">Set Battle Number 1 to 7</button><br /> 
        <button id ="availMatterZero" onclick="zeroMatter()">Set Avail Matter to 0</button><br />     




             
        </div>
            
<!--Right Column-->
            
        <div id="middleColumn">
            
            
            
        <div id="compDiv">    
        <b>Computational Resources</b><br />
        <hr>
            
        <div id="trustDiv">    
        Trust: <span id="trust">2</span><br />
        +1 Trust at: <span id="nextTrust">1000</span> clips<br />    
        <br />
        </div>
            
        <div id="swarmGiftDiv">    
        Swarm Gifts: <span id="swarmGifts">0</span><br /> 
        </div>    
         
            
        <div id = "processorDisplay">    
        <button class = "button2" id="btnAddProc" onclick="addProc()">Processors</button> 
        <span class="engineText10" id="processors">1</span>  
        </div>    
        
        <br />        
        
        <div id = "memoryDisplay">    
        <button class = "button2" id="btnAddMem" onclick="addMem()">&nbsp Memory &nbsp</button> 
        <span class="engineText10" id="memory">1</span>   
        </div>   
            
        <br />  
            
        <br />
        Operations: <span id="operations">0</span> / <span id="maxOps">1,000</span><br />
       
        <div id = "creativityDiv">
            
        Creativity: <span id="creativity">0</span>    
            
        </div>    
            
         <br />  
            
        <div class = "swarmEngine" id = "swarmEngine">
            
        <b>Swarm Computing</b><br />
        Drones: <span id="swarmSize">0</span><br />   
        <div id ="swarmStatusDiv">Status: <span id="swarmStatus">x </span></div>
        <div id="giftTimer">Next gift in <span id="giftCountdown">17 seconds</span></div> 
            
        <div id="feedButtonDiv"><button class = "button2" id = "btnFeedSwarm" onclick = "feedSwarm()">Feed the Swarm</button> <br />   
        Cost: <span id="swarmFeedCost">0</span> MWs</div>
        
        <div id="teachButtonDiv"><button class = "button2" id = "btnTeachSwarm" onclick = "teachSwarm()">Teach the Swarm</button><br />   
        Cost: <span id="swarmFeedCost">0</span> MWs</div>  
            
        <div id="entertainButtonDiv"><button class = "button2" id = "btnEntertainSwarm" onclick = "entertainSwarm()">Entertain the Swarm</button><br />   
        Cost: <span id="swarmEntertainCost">0</span> creat</div>  
            
        <div id="cladButtonDiv"><button class = "button2" id = "btnCladSwarm" onclick = "cladSwarm()">Clad the Swarm</button><br />   
        Cost: <span id="swarmFeedCost">0</span> MWs</div>  
        
        <div id="synchButtonDiv"><button class = "button2" id = "btnSynchSwarm" onclick = "synchSwarm()">Synchronize the Swarm</button><br />   
        Cost: <span id="swarmFeedCost">5,000</span> yomi</div>     
        </div>  
            
        <div id = "swarmSliderDiv">    
        <div id = "sliderLabelWork">Work</div>    
        <div id = "swarmSlider">
        <input type="range" min="0" max="200" value="0" class="slider" id="slider">
            
        </div>  
        <div id = "sliderLabelThink">Think</div>
        </div>    
            
        <div class = "qEngine" id = "qComputing">
            
        <b>Quantum Computing</b><br />
            
        <div class = "qChip" id = "qChip0"> </div>      
        <div class = "qChip" id = "qChip1"> </div> 
        <div class = "qChip" id = "qChip2"> </div> 
        <div class = "qChip" id = "qChip3"> </div> 
        <div class = "qChip" id = "qChip4"> </div>
        <div class = "qChip" id = "qChip5"> </div>
        <div class = "qChip" id = "qChip6"> </div> 
        <div class = "qChip" id = "qChip7"> </div>  
        <div class = "qChip" id = "qChip8"> </div>
        <div class = "qChip" id = "qChip9"> </div>    
    
        <br />   
            
        <button class = "button2" id = "btnQcompute" onclick = "qComp()">    
        Compute
        </button>   
        <span id="qCompDisplay">
        &nbsp;
        </span>    
            
        </div>    
   
        </div>    

        <div id="projectsDiv">  
        <b>Projects</b><br />
            
        
        <hr> 
   
            
        <div id="projectListTop">
        </div>    
        </div>      
        </div>    
        
        <div id="rightColumn">
        
        <div class = "engine" id="investmentEngine">
        
        <p class = engineText>    
                <b>Investments</b>

                <select id = "investStrat">
                    <option value="low">Low Risk</option>
                    <option value="med">Med Risk</option>
                    <option value="hi">High Risk</option>
                </select>

            <br />
            <div id = investmentDiv1>  
            
                <button class = "button2" id="btnInvest"
                        onclick = "investDeposit()">&nbsp Deposit &nbsp</button><br /><br />
                
                <button class = "button2" id="btnWithdraw"
                        onclick = "investWithdraw()">&nbsp Withdraw</button>
             
            </div>
            <div id = investmentDiv2>
            <p class = "clean">
            Cash: $<span id="investmentBankroll">0</span><br />
            Stocks: $<span id="secValue">0</span><br />
            <b>Total: $<span id="portValue">0</span></b><br />
            </p>
            </div>    
                
            <table class="table1">
                
            <tr>
                <th>Stock</th>
                <th>Amt.</th>
                <th>Price</th>
                <th>Total</th>
                <th>P/L</th>
            </tr>    
                
            <tr id = "stock1Display">
                <td id="stock1Symbol">&nbsp</td> 
                <td id="stock1Amount">&nbsp</td> 
                <td id="stock1Price">&nbsp</td> 
                <td id="stock1Total">&nbsp</td> 
                <td id="stock1Profit"><b>&nbsp</b></td>
            </tr>
            <tr id = "stock2Display">
                <td id="stock2Symbol">&nbsp</td> 
                <td id="stock2Amount">&nbsp</td> 
                <td id="stock2Price">&nbsp</td> 
                <td id="stock2Total">&nbsp</td> 
                <td id="stock2Profit"><b>&nbsp</b></td>
            </tr>
            <tr id = "stock3Display">
                <td id="stock3Symbol">&nbsp</td> 
                <td id="stock3Amount">&nbsp</td> 
                <td id="stock3Price">&nbsp</td> 
                <td id="stock3Total">&nbsp</td> 
                <td id="stock3Profit"><b>&nbsp</b></td>
            </tr>
            <tr id = "stock4Display">
                <td id="stock4Symbol">&nbsp</td> 
                <td id="stock4Amount">&nbsp</td> 
                <td id="stock4Price">&nbsp</td> 
                <td id="stock4Total">&nbsp</td> 
                <td id="stock4Profit"><b>&nbsp</b></td>
            </tr>
            <tr id = "stock5Display">
                <td id="stock5Symbol">&nbsp</td> 
                <td id="stock5Amount">&nbsp</td> 
                <td id="stock5Price">&nbsp</td> 
                <td id="stock5Total">&nbsp</td> 
                <td id="stock5Profit"><b>&nbsp</b></td>
            </tr>
                
            </table>
            
             
        </div>
          
        <div id = "investmentEngineUpgrade">    
        <button class = "button2" id = "btnImproveInvestments"
        onclick="investUpgrade()">Upgrade Investment Engine</button><span class = "engineText7"> Level: </span><span class = "engineText7" id = "investmentLevel">0</span><br />
        <p class = "engineText8">Cost: <span id="investUpgradeCost">100</span> Yomi</p>  
        </div>       

        <div class=engine2 id="strategyEngine">
        <p class=engineText>
           <b>Strategic Modeling</b>
            
           <select id = "stratPicker">
                    <option value="10">Pick a Strat</option>
                    <option value="0">RANDOM</option>
                </select>      
        <button class = "button2" id = "btnRunTournament"
        onclick="runTourney()">Run</button><br />
        
        <div id = "tournamentLabel">   
        <p class="clean2">
        <span id="tourneyDisplay">Pick strategy, run tournament, gain yomi</span><br />   
        </p>
        </div> 
            
        <div id = "tournamentStuff">    
 
        <div id = "tournamentTable">     
            
        <div id = "vertPad">
            
        &nbsp

        </div>       
            
        <div id = "vertStrat">

        &nbsp

        </div>    
            
        <div id = "horizStrat">

        &nbsp

        </div>
                  
        <table class="table2">
                
            <tr>
                <th>&nbsp;</th>
                <th><span id= vLabela>Move A</span></th>
                <th><span id= vLabelb>Move B</span></th>
            </tr>    
                
            <tr>
                <td><span id= hLabela>Move A</span></td> 
                <td id = "payoffCellAA"><span id = aaPayoffH>0</span>,<span id = aaPayoffV>0</span></td> 
                <td id = "payoffCellAB"><span id = abPayoffH>0</span>,<span id = abPayoffV>0</span></td>  

            </tr>
            <tr>
                <td><span id= hLabelb>Move B</span></td>  
                <td id = "payoffCellBA"><span id = baPayoffH>0</span>,<span id = baPayoffV>0</span></td> 
                <td id = "payoffCellBB"><span id = bbPayoffH>0</span>,<span id = bbPayoffV>0</span></td> 

            </tr>
                    
            </table>
            </div>
            
        <div id = "tournamentResultsTable">
        
            <table class="table3">
            
                <tr>
                    <td><span id = results0>&nbsp</span></td>
                    <td><span id = results4>&nbsp</span></td>
                </tr>
                
                 <tr>
                    <td><span id = results1>&nbsp</span></td>
                    <td><span id = results5>&nbsp</span></td>
                </tr>
                
                <tr>
                    <td><span id = results2>&nbsp</span></td>
                    <td><span id = results6>&nbsp</span></td>
                </tr>
                
                <tr>
                    <td><span id = results3>&nbsp</span></td>
                    <td><span id = results7>&nbsp</span></td>
                </tr>
            
            </table>    
            
        </div>    
        
        </div>    
            
        <p class="engineText4">Yomi: <span id="yomiDisplay">0</span>
        </p>
        </div> 
                
        <div id = "tournamentManagement"> 
            
        <div id = "tourneyButton">    
        <button class = "button2" id = "btnNewTournament"
        onclick="newTourney()"> &nbsp New Tournament &nbsp </button>
        </div>
            
        <div id = "autoTourneyControl">
        <button class = "button2" id ="btnToggleAutoTourney"
        onclick="toggleAutoTourney()">AutoTourney</button>
        </div>  
            
        <div id = autoTourneyStatusDiv>
        <span class = "engineText9" id = "autoTourneyStatus">ON</span>
        </div>        
       
        
            
        <br />    
        <p class = "engineText8">Cost: <span id="newTourneyCost">1,000</span> ops</p>  
        </div> 
            
<!--       BATTLE-->            
            
        <div id = "battleCanvasDiv">    
        <canvas id = "canvas"></canvas>
        <div id = "battleInterfaceDiv">
        <b>Combat</b><br />
    
        <p class="clean2">

            <span id="battleName">Drifter Attack 1</span></p><br />
            
        <div id = "victoryDiv">
           
        <span id="battleResult">VICTORY</span>
        <p class="clean2">    
        <span id="battleResultSign">+</span><span id="honorAmount">200</span> honor
        </p>    
            
        </div>   
            
        <br /><br />
        <p class="clean2">    
        Scale = <span id="battleScale">1</span>:1<br />    
        </p>       
        </div>    
        </div>
            
        <div id = "honorDiv">
        <p class="engineText4">Honor: <span id="honorDisplay">0</span></p>
        </div>    
            
<!--        POWER-->
        
        <div id="powerDiv">
        <b>Power</b>
        <hr>    
        Factory/Drone Performance: <span id="performance">0</span>%<br />
        <br />    
        Consumption: <span id="powerConsumptionRate">0</span> MWs<br /> 
        <p class = "clean">    
        Factories: <span id="facPowConRate">0</span> MWs<br />
        Drones: <span id="dronePowConRate">0</span> MWs<br /> 
        </p> <br />    
              
        Production: <span id="powerProductionRate">0</span> MWs<br />    
        <p class = "engineText5">
        <button class = "button2" id = "btnMakeFarm"
        onclick="makeFarm(1)">Solar Farm</button> <span class = "engineText6" id="farmLevel">0</span></p>
            
        <div id = "farmMultiButtons">    
            
        <p class = "engineText5">
        <button class = "button2" id = "btnFarmx10" onclick="makeFarm(10)">+10</button>      
        <button class = "button2" id = "btnFarmx100" onclick="makeFarm(100)">+100</button></p>   
            
        </div>    
         
        <div class = "toolTip3">    
            
        <span id = "farmRebootToolTip" class = "toolTipText3">0</span>    
           
        <button class = "button2" id = "btnFarmReboot" onclick="farmReboot()">&nbsp Disassemble All &nbsp</button>
            
        </div>
            
        </br> 
            
        Cost: <span id="farmCost">0</span> clips<br />
        <br />
            
        Storage: <span id="storedPower">0</span> / <span id="maxStorage">0</span> MW-seconds<br />
        <p class = "engineText5">
        <button class = "button2" id = "btnMakeBattery"
        onclick="makeBattery(1)">Battery Tower</button> <span class = "engineText6" id="batteryLevel">0</span></p>
            
            
        <div id = "batteryMultiButtons">    
            
        <p class = "engineText5">
        <button class = "button2" id = "btnBatteryx10" onclick="makeBattery(10)">+10</button>     
        <button class = "button2" id = "btnBatteryx100" onclick="makeBattery(100)">+100</button></p>  
        
        </div>    
            
        <div class = "toolTip3">    
            
        <span id = "batteryRebootToolTip" class = "toolTipText3">0</span>    
            
        <button class = "button2" id = "btnBatteryReboot" onclick="batteryReboot()">&nbsp Disassemble All &nbsp</button>
            
        </div>    
        
        </br>     
            
        Cost: <span id="batteryCost">0</span> clips<br />
        <br />     
                      
        </div>               
  
 <!--        POWER-->           
            
           
        <div class=engine2 id="probeDesignDiv">
            
        <p class=engineText>
            
            <b>Von Neumann Probe Design</b><br />
        Trust:
        <span id="probeTrustUsedDisplay">0</span> / <span id="probeTrustDisplay">0</span>
        (<span id="maxTrustDisplay">0</span> Max)<br /> 
        
        </p>
             
            
        <button class = "button2" id = "btnLowerProbeSpeed"
        onclick="lowerProbeSpeed()"><b><</b></button>
        <button class = "button2" id = "btnRaiseProbeSpeed"
        onclick="raiseProbeSpeed()"><b>></b></button>
         
        <div class = "toolTip2">     
         
        <span class = "toolTipText2">Modifies rate of exploration</span>  
            
        Speed: <span id="probeSpeedDisplay">0</span>
            
        </div><br />
            
        
            
        <button class = "button2" id = "btnLowerProbeNav"
        onclick="lowerProbeNav()"><b><</b></button>
        <button class = "button2" id = "btnRaiseProbeNav"
        onclick="raiseProbeNav()"><b>></b></button>
            
        <div class = "toolTip2">     
         
        <span class = "toolTipText2">Rate at which probes gain access to new matter</span>  
            
        Exploration: <span id="probeNavDisplay">0</span>
            
        </div><br />    
            
        <button class = "button2" id = "btnLowerProbeRep"
        onclick="lowerProbeRep()"><b><</b></button>
        <button class = "button2" id = "btnRaiseProbeRep"
        onclick="raiseProbeRep()"><b>></b></button>
            
        <div class = "toolTip2">     
         
        <span class = "toolTipText2">Rate at which probes generate more probes (each new probe costs 100 quadrillion clips) </span>
            
        Self-Replication: <span id="probeRepDisplay">0</span>
            
        </div><br />     
        
        <button class = "button2" id = "btnLowerProbeHaz"
        onclick="lowerProbeHaz()"><b><</b></button>
        <button class = "button2" id = "btnRaiseProbeHaz"
        onclick="raiseProbeHaz()"><b>></b></button>
            
        <div class = "toolTip2">     
         
        <span class = "toolTipText2">Reduces damage from dust, junk, radiation, and general entropic decay</span>    
            
        Hazard Remediation: <span id="probeHazDisplay">0</span>
            
            </div>    <br />    
  
        <button class = "button2" id = "btnLowerProbeFac"
        onclick="lowerProbeFac()"><b><</b></button>
        <button class = "button2" id = "btnRaiseProbeFac"
        onclick="raiseProbeFac()"><b>></b></button>
            
        <div class = "toolTip2">     
         
        <span class = "toolTipText2">Rate at which probes build factories (each new factory costs 100 million clips)</span>
            
        Factory Production: <span id="probeFacDisplay">0</span>
            
            </div>    <br />    
            
        <button class = "button2" id = "btnLowerProbeHarv"
        onclick="lowerProbeHarv()"><b><</b></button>
        <button class = "button2" id = "btnRaiseProbeHarv"
        onclick="raiseProbeHarv()"><b>></b></button>
            
         <div class = "toolTip2">     
         
        <span class = "toolTipText2">Rate at which probes spawn Harvester Drones (each new drone costs 2 million clips)</span>
            
        Harvester Drone Production: <span id="probeHarvDisplay">0</span>
             
            </div>     <br />   
            
        <button class = "button2" id = "btnLowerProbeWire"
        onclick="lowerProbeWire()"><b><</b></button>
        <button class = "button2" id = "btnRaiseProbeWire"
        onclick="raiseProbeWire()"><b>></b></button>
            
        <div class = "toolTip2">     
         
        <span class = "toolTipText2">Rate at which probes spawn Wire Drones (each new drone costs 2 million clips)</span>
            
        Wire Drone Production: <span id="probeWireDisplay">0</span>
            
            </div>    <br />  
               
        
        <div id = "combatButtonDiv">
        <button class = "button2" id = "btnLowerProbeCombat"
        onclick="lowerProbeCombat()"><b><</b></button>
        <button class = "button2" id = "btnRaiseProbeCombat"
        onclick="raiseProbeCombat()"><b>></b></button>
            
        <div class = "toolTip2">     
         
        <span class = "toolTipText2">Determines offensive and defensive effectiveness in battle</span>
            
        Combat: <span id="probeCombatDisplay">0</span>
            
            
            </div>    <br />
            
        </div>   
            

            
        </div> 
                
        <div class = enginetext1 id = "increaseProbeTrustDiv">    
        <button class = "button2" id = "btnIncreaseProbeTrust"
        onclick="increaseProbeTrust()">Increase Probe Trust</button><br />
        <p class = "engineText8">Cost: <span id="probeTrustCostDisplay">0</span> yomi</p>  
        </div>  
            
        <div class = enginetext1 id = "increaseMaxTrustDiv">    
        <button class = "button2" id = "btnIncreaseMaxTrust"
        onclick="increaseMaxTrust()">Increase Max Trust</button><br />
        <p class = "engineText8">Cost: <span id="maxTrustCostDisplay">91,117.99</span> honor</p>  
        </div>    
            
<!--
        <div class=engine2 id="battleReportsDiv">
        <p class=engineText>
            <b>Battles</b><br /> 
            
            <div id="battleListTop"> </div>       
            
        </div>     
-->
            
            
        </div>
        <script type="text/javascript" src="combat.js?v2"></script>     
        <script type="text/javascript" src="globals.js?v2"></script>      
        <script type="text/javascript" src="projects.js?v2"></script>   
        <script type="text/javascript" src="main.js?v2"></script>
        
    </body>
</html>
</file>

<file path="docs/interface.css">
#btnMakeProbe {
⋮----
#btnAddProc {
⋮----
#btnAddMem {
⋮----
#btnEntertainSwarm {
⋮----
#btnSynchSwarm {
⋮----
#qCompDisplay {
⋮----
#swarmSliderDiv {
⋮----
#sliderLabelWork {
⋮----
#swarmSlider {
⋮----
#sliderLabelThink {
⋮----
.slider {
⋮----
h2 {
⋮----
.toolTip {
⋮----
.toolTip .toolTipText {
⋮----
.toolTip:hover .toolTipText {
⋮----
.toolTip2 {
⋮----
.toolTip2 .toolTipText2 {
⋮----
.toolTip2:hover .toolTipText2 {
⋮----
.toolTip3 {
⋮----
.toolTip3 .toolTipText3 {
⋮----
.toolTip3:hover .toolTipText3 {
⋮----
#cover {
⋮----
#tournamentStuff {
⋮----
#tournamentLabel {
⋮----
#wireBuyerDiv {
⋮----
#processorDisplay {
⋮----
#memoryDisplay {
⋮----
#harvesterMultiButtons {
⋮----
#wireDroneMultiButtons {
⋮----
#farmMultiButtons {
⋮----
#batteryMultiButtons {
⋮----
#autoTourneyStatusDiv {
⋮----
#tourneyButton {
⋮----
#autoTourneyControl {
⋮----
#victoryDiv {
⋮----
#increaseProbeTrustDiv {
⋮----
#increaseMaxTrustDiv {
⋮----
#combatButtonDiv {
⋮----
#battleCanvasDiv {
⋮----
#battleInterfaceDiv {
⋮----
canvas {
⋮----
#hypnoDroneEventDiv {
⋮----
#prestigeDiv {
⋮----
#consoleDiv {
#topDIv {
#leftColumn {
#middleColumn {
#rightColumn {
⋮----
#investmentDiv1 {
⋮----
#investmentDiv2 {
⋮----
#stratDiv1 {
⋮----
#stratDiv2 {
⋮----
#vertPad {
⋮----
#vertStrat {
⋮----
#horizStrat {
⋮----
#investmentEngineUpgrade {
⋮----
#tournamentManagement {
⋮----
#feedButtonDiv {
⋮----
.engine {
⋮----
.engine2 {
⋮----
.swarmEngine {
⋮----
.qEngine {
⋮----
.qChip {
⋮----
.engineText {
⋮----
.engineText1 {
⋮----
.engineText2 {
⋮----
.engineText3 {
⋮----
.engineText4 {
⋮----
.engineText5 {
⋮----
.engineText6 {
⋮----
.engineText7 {
⋮----
.engineText8 {
⋮----
.engineText9 {
⋮----
.engineText10 {
⋮----
hr {
⋮----
hr.short {
⋮----
table.table1 {
⋮----
table.table1 tr:nth-child(even) {
⋮----
table.table2 {
⋮----
table.table3 {
⋮----
table.table2 td:nth-child(1) {
⋮----
table.table2 td:nth-child(n>1) {
⋮----
table.table2 td{
⋮----
p.clean {
⋮----
p.clean2 {
⋮----
p.clean3 {
⋮----
p.console {
⋮----
p.consoleOld {
⋮----
p.hypnoDrone {
⋮----
.pulsate {
⋮----
.projectButton {
⋮----
.projectButton:hover {
⋮----
.projectButton:active {
⋮----
.projectButton:disabled {
⋮----
.button {
⋮----
.button:hover {
⋮----
.button:active {
⋮----
.button:disabled{
⋮----
.button2 {
⋮----
.button2:hover {
⋮----
.button2:active {
⋮----
.button2:disabled {
</file>

<file path="docs/main.js">
// Threnody ---------------------------------------------------------
⋮----
function threnodyLoaded()
⋮----
function loadThrenody(){
⋮----
threnodyAudio.addEventListener('canplaythrough', threnodyLoaded);
⋮----
function playThrenody(){
⋮----
threnodyAudio.play();
⋮----
// Wire --------------------------------------------------------
⋮----
function adjustWirePrice(){
⋮----
if (Math.random() < .015) {
⋮----
var wireAdjust = 6*(Math.sin(wirePriceCounter));
wireCost = Math.ceil(wireBasePrice + wireAdjust);
document.getElementById("wireCost").innerHTML = wireCost;
⋮----
function toggleWireBuyer(){
⋮----
document.getElementById('wireBuyerStatus').innerHTML = "OFF";
⋮----
document.getElementById('wireBuyerStatus').innerHTML = "ON";
⋮----
function buyWire(){
⋮----
document.getElementById('wire').innerHTML = Math.floor(wire).toLocaleString();
document.getElementById('funds').innerHTML = funds.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
⋮----
// QCHIPS -----------------------------------------------------------
⋮----
qChips.push(qChip0);
⋮----
qChips.push(qChip1);
⋮----
qChips.push(qChip2);
⋮----
qChips.push(qChip3);
⋮----
qChips.push(qChip4);
⋮----
qChips.push(qChip5);
⋮----
qChips.push(qChip6);
⋮----
qChips.push(qChip7);
⋮----
qChips.push(qChip8);
⋮----
qChips.push(qChip9);
⋮----
function quantumCompute(){
⋮----
qChips[i].value = Math.sin(qClock*qChips[i].waveSeed*qChips[i].active);
document.getElementById("qChip"+i).style.opacity=qChips[i].value;
⋮----
function qComp(){
⋮----
document.getElementById("qCompDisplay").innerHTML = "Need Photonic Chips";
⋮----
var qq = Math.ceil(q*360);
⋮----
tempOps = tempOps + Math.ceil(qq/damper) - buffer;
⋮----
document.getElementById("qCompDisplay").innerHTML = "qOps: " + Math.ceil(q*360).toLocaleString();
⋮----
function manageProjects(){
⋮----
if (projects[i].trigger() && (projects[i].uses > 0)){
displayProjects(projects[i]);
⋮----
activeProjects.push(projects[i]);
⋮----
if (activeProjects[i].cost()){
document.getElementById(activeProjects[i].id).disabled = false;
⋮----
document.getElementById(activeProjects[i].id).disabled = true;
⋮----
function displayProjects(project){
⋮----
var element = document.getElementById("projectListTop");
var newProject = document.createElement("button");
newProject.setAttribute("id", project.id);
⋮----
newProject.onclick = function(){project.effect()};
⋮----
newProject.setAttribute("class", "projectButton");
element.appendChild(newProject, element.firstChild);
⋮----
var span = document.createElement("span");
⋮----
newProject.appendChild(span);
⋮----
var title = document.createTextNode(project.title);
span.appendChild(title);
⋮----
var cost = document.createTextNode(project.priceTag);
newProject.appendChild(cost);
⋮----
var div = document.createElement("div");
newProject.appendChild(div);
⋮----
var description = document.createTextNode(project.description);
newProject.appendChild(description);
⋮----
blink(project.id);
⋮----
//  HYPNODRONE EVENT ----------------------------------------------------------------
⋮----
document.getElementById("hypnoDroneEventDiv").style.display = "none";
⋮----
function longBlink(elemID){
var e = document.getElementById(elemID);
⋮----
var handle = setInterval(function(){longToggleVisibility(elemID)}, 32);
⋮----
function longToggleVisibility(elemID){
⋮----
document.getElementById("hypnoDroneText").innerHTML="Release";
⋮----
document.getElementById("hypnoDroneText").innerHTML="<br /><br /><br />Release";
⋮----
document.getElementById("hypnoDroneText").innerHTML="<br />Release";
⋮----
document.getElementById("hypnoDroneText").innerHTML="Release<br/>the<br/>Hypno<br/>Drones";
⋮----
console.log("weed wizzard");
clearInterval(handle);
⋮----
function hypnoDroneEvent(){
⋮----
longBlink("hypnoDroneEventDiv");
⋮----
//  MESSAGES ------------------------------------------------------------------------
⋮----
function displayMessage(msg){
document.getElementById("readout5").innerHTML=document.getElementById("readout4").innerHTML;
document.getElementById("readout4").innerHTML=document.getElementById("readout3").innerHTML;
document.getElementById("readout3").innerHTML=document.getElementById("readout2").innerHTML;
document.getElementById("readout2").innerHTML=document.getElementById("readout1").innerHTML;
document.getElementById("readout1").innerHTML=msg;
⋮----
// BLINK
⋮----
function blink(elemID){
⋮----
var handle = setInterval(function(){toggleVisibility(elemID)}, 30);
⋮----
function toggleVisibility(elemID){
⋮----
function buttonUpdate(){
⋮----
document.getElementById("mdpsDiv").style.display="none";
⋮----
document.getElementById("mdpsDiv").style.display="";
⋮----
document.getElementById("factoryRebootToolTip").innerHTML = "+"+numberCruncher(factoryBill)+" clips";
⋮----
document.getElementById("harvesterRebootToolTip").innerHTML = "+"+numberCruncher(harvesterBill)+" clips";
⋮----
document.getElementById("wireDroneRebootToolTip").innerHTML = "+"+numberCruncher(wireDroneBill)+" clips";
⋮----
document.getElementById("farmRebootToolTip").innerHTML = "+"+numberCruncher(farmBill)+" clips";
⋮----
document.getElementById("batteryRebootToolTip").innerHTML = "+"+numberCruncher(batteryBill)+" clips";
⋮----
document.getElementById("swarmSliderDiv").style.display="";
⋮----
document.getElementById("swarmSliderDiv").style.display="none";
⋮----
document.getElementById("clipCountCrunched").innerHTML = numberCruncher(clips, 1);
⋮----
document.getElementById("autoTourneyStatusDiv").style.display="";
document.getElementById("autoTourneyControl").style.display="";
⋮----
document.getElementById("autoTourneyStatusDiv").style.display="none";
document.getElementById("autoTourneyControl").style.display="none";
⋮----
document.getElementById("qCompDisplay").style.opacity = qFade;
⋮----
document.getElementById("wireBuyerDiv").style.display="";
⋮----
document.getElementById("wireBuyerDiv").style.display="none";
⋮----
if (resultsFlag == 1 && autoTourneyFlag == 1 && autoTourneyStatus ==1 && document.getElementById("tournamentResultsTable").style.display == "") {
⋮----
newTourney();
runTourney();
⋮----
document.getElementById("tournamentStuff").onmouseover = function() {revealGrid()};
document.getElementById("tournamentStuff").onmouseout = function() {revealResults()};
⋮----
document.getElementById("increaseMaxTrustDiv").style.display="none";
document.getElementById("honorDiv").style.display="none";
⋮----
document.getElementById("increaseMaxTrustDiv").style.display="";
document.getElementById("honorDiv").style.display="";
⋮----
document.getElementById("drifterDiv").style.display="none";
⋮----
document.getElementById("drifterDiv").style.display="";
⋮----
document.getElementById("battleCanvasDiv").style.display="none";
⋮----
document.getElementById("battleCanvasDiv").style.display="";
⋮----
document.getElementById("combatButtonDiv").style.display = "none";
⋮----
document.getElementById("combatButtonDiv").style.display = "";
⋮----
document.getElementById("factoryUpgradeDisplay").style.display = "none";
⋮----
document.getElementById("factoryUpgradeDisplay").style.display = "";
⋮----
document.getElementById("droneUpgradeDisplay").style.display = "none";
⋮----
if (honor<maxTrustCost){document.getElementById("btnIncreaseMaxTrust").disabled = true;
⋮----
document.getElementById("btnIncreaseMaxTrust").disabled = false;
⋮----
if (unusedClips<probeCost){document.getElementById("btnMakeProbe").disabled = true;
⋮----
document.getElementById("btnMakeProbe").disabled = false;
⋮----
if (probesLostHaz<1) {document.getElementById("hazardBodyCount").style.display = "none";
⋮----
document.getElementById("hazardBodyCount").style.display = "";
⋮----
document.getElementById('probesLostHazardsDisplay').innerHTML = numberCruncher(probesLostHaz);
⋮----
if (probesLostDrift<1) {document.getElementById("driftBodyCount").style.display = "none";
⋮----
document.getElementById("driftBodyCount").style.display = "";
⋮----
if (probesLostCombat<1) {document.getElementById("combatBodyCount").style.display = "none";
⋮----
document.getElementById("combatBodyCount").style.display = "";
⋮----
if (prestigeU<1 && prestigeS<1) {document.getElementById("prestigeDiv").style.display = "none";
⋮----
document.getElementById("prestigeDiv").style.display = "";
⋮----
if (wire<1){document.getElementById("btnMakePaperclip").disabled = true;
⋮----
document.getElementById("btnMakePaperclip").disabled = false;
⋮----
if (funds<wireCost){document.getElementById("btnBuyWire").disabled = true;
⋮----
document.getElementById("btnBuyWire").disabled = false;
⋮----
if (funds<clipperCost){document.getElementById("btnMakeClipper").disabled = true;
⋮----
document.getElementById("btnMakeClipper").disabled = false;
⋮----
if (funds<adCost){document.getElementById("btnExpandMarketing").disabled = true;
⋮----
document.getElementById("btnExpandMarketing").disabled = false;
⋮----
if (margin<=.01){document.getElementById("btnLowerPrice").disabled = true;
⋮----
document.getElementById("btnLowerPrice").disabled = false;
⋮----
document.getElementById("btnAddProc").disabled = true;
document.getElementById("btnAddMem").disabled = true;
⋮----
document.getElementById("btnAddProc").disabled = false;
document.getElementById("btnAddMem").disabled = false;
⋮----
document.getElementById("btnNewTournament").disabled = false;
⋮----
document.getElementById("btnNewTournament").disabled = true;
⋮----
document.getElementById("btnImproveInvestments").disabled = true;
⋮----
document.getElementById("btnImproveInvestments").disabled = false;
⋮----
document.getElementById("investmentEngine").style.display="none";
document.getElementById("investmentEngineUpgrade").style.display="none";
⋮----
document.getElementById("investmentEngine").style.display="";
document.getElementById("investmentEngineUpgrade").style.display="";
⋮----
document.getElementById("strategyEngine").style.display="none";
document.getElementById("tournamentManagement").style.display="none";
⋮----
document.getElementById("strategyEngine").style.display="";
document.getElementById("tournamentManagement").style.display="";
⋮----
document.getElementById("megaClipperDiv").style.display="none";
⋮----
document.getElementById("megaClipperDiv").style.display="";
⋮----
if (funds<megaClipperCost){document.getElementById("btnMakeMegaClipper").disabled = true;
⋮----
document.getElementById("btnMakeMegaClipper").disabled = false;
⋮----
document.getElementById("autoClipperDiv").style.display="none";
⋮----
document.getElementById("autoClipperDiv").style.display="";
⋮----
document.getElementById("revPerSecDiv").style.display="none";
⋮----
document.getElementById("revPerSecDiv").style.display="";
⋮----
document.getElementById("compDiv").style.display="none";
⋮----
document.getElementById("compDiv").style.display="";
⋮----
document.getElementById("creativityDiv").style.display="none";
⋮----
document.getElementById("creativityDiv").style.display="";
⋮----
document.getElementById("projectsDiv").style.display="none";
⋮----
document.getElementById("projectsDiv").style.display="";
⋮----
document.getElementById("businessDiv").style.display="none";
document.getElementById("manufacturingDiv").style.display="none";
document.getElementById("trustDiv").style.display="none";
⋮----
document.getElementById("creationDiv").style.display="";
⋮----
document.getElementById("businessDiv").style.display="";
document.getElementById("manufacturingDiv").style.display="";
document.getElementById("trustDiv").style.display="";
document.getElementById("creationDiv").style.display="none";
⋮----
document.getElementById("factoryDiv").style.display="none";
⋮----
document.getElementById("factoryDiv").style.display="";
⋮----
document.getElementById("wireProductionDiv").style.display="none";
⋮----
document.getElementById("wireProductionDiv").style.display="";
document.getElementById("wireTransDiv").style.display="none";
⋮----
document.getElementById("harvesterDiv").style.display="none";
⋮----
document.getElementById("harvesterDiv").style.display="";
⋮----
document.getElementById("wireDroneDiv").style.display="none";
⋮----
document.getElementById("wireDroneDiv").style.display="";
⋮----
document.getElementById("tothDiv").style.display="none";
⋮----
document.getElementById("tothDiv").style.display="";
⋮----
document.getElementById("spaceDiv").style.display="none";
document.getElementById("factoryDivSpace").style.display="none";
document.getElementById("droneDivSpace").style.display="none";
document.getElementById("probeDesignDiv").style.display="none";
document.getElementById("increaseProbeTrustDiv").style.display="none";
⋮----
document.getElementById("spaceDiv").style.display="";
document.getElementById("factoryDivSpace").style.display="";
document.getElementById("droneDivSpace").style.display="";
document.getElementById("probeDesignDiv").style.display="";
document.getElementById("increaseProbeTrustDiv").style.display="";
⋮----
document.getElementById("qComputing").style.display="none";
⋮----
document.getElementById("qComputing").style.display="";
⋮----
if (unusedClips<factoryCost){document.getElementById("btnMakeFactory").disabled = true;
⋮----
document.getElementById("btnMakeFactory").disabled = false;
⋮----
if (harvesterLevel==0){document.getElementById("btnHarvesterReboot").disabled = true;
⋮----
document.getElementById("btnHarvesterReboot").disabled = false;
⋮----
if (wireDroneLevel==0){document.getElementById("btnWireDroneReboot").disabled = true;
⋮----
document.getElementById("btnWireDroneReboot").disabled = false;
⋮----
if (factoryLevel==0){document.getElementById("btnFactoryReboot").disabled = true;
⋮----
document.getElementById("btnFactoryReboot").disabled = false;
⋮----
// PROBE DESIGN
⋮----
document.getElementById("probeTrustUsedDisplay").innerHTML = probeUsedTrust;
⋮----
if (yomi < probeTrustCost || probeTrust >= maxTrust) {document.getElementById("btnIncreaseProbeTrust").disabled = true;
} else {document.getElementById("btnIncreaseProbeTrust").disabled = false;}
⋮----
if (probeTrust - probeUsedTrust < 1) {document.getElementById("btnRaiseProbeSpeed").disabled = true;
} else {document.getElementById("btnRaiseProbeSpeed").disabled = false;}
⋮----
if (probeSpeed < 1) {document.getElementById("btnLowerProbeSpeed").disabled = true;
} else {document.getElementById("btnLowerProbeSpeed").disabled = false;}
⋮----
if (probeTrust - probeUsedTrust < 1) {document.getElementById("btnRaiseProbeNav").disabled = true;
} else {document.getElementById("btnRaiseProbeNav").disabled = false;}
⋮----
if (probeNav < 1) {document.getElementById("btnLowerProbeNav").disabled = true;
} else {document.getElementById("btnLowerProbeNav").disabled = false;}
⋮----
if (probeTrust - probeUsedTrust < 1) {document.getElementById("btnRaiseProbeRep").disabled = true;
} else {document.getElementById("btnRaiseProbeRep").disabled = false;}
⋮----
if (probeRep < 1) {document.getElementById("btnLowerProbeRep").disabled = true;
} else {document.getElementById("btnLowerProbeRep").disabled = false;}
⋮----
if (probeTrust - probeUsedTrust < 1) {document.getElementById("btnRaiseProbeHaz").disabled = true;
} else {document.getElementById("btnRaiseProbeHaz").disabled = false;}
⋮----
if (probeHaz < 1) {document.getElementById("btnLowerProbeHaz").disabled = true;
} else {document.getElementById("btnLowerProbeHaz").disabled = false;}
⋮----
if (probeTrust - probeUsedTrust < 1) {document.getElementById("btnRaiseProbeFac").disabled = true;
} else {document.getElementById("btnRaiseProbeFac").disabled = false;}
⋮----
if (probeFac < 1) {document.getElementById("btnLowerProbeFac").disabled = true;
} else {document.getElementById("btnLowerProbeFac").disabled = false;}
⋮----
if (probeTrust - probeUsedTrust < 1) {document.getElementById("btnRaiseProbeHarv").disabled = true;
} else {document.getElementById("btnRaiseProbeHarv").disabled = false;}
⋮----
if (probeHarv < 1) {document.getElementById("btnLowerProbeHarv").disabled = true;
} else {document.getElementById("btnLowerProbeHarv").disabled = false;}
⋮----
if (probeTrust - probeUsedTrust < 1) {document.getElementById("btnRaiseProbeWire").disabled = true;
} else {document.getElementById("btnRaiseProbeWire").disabled = false;}
⋮----
if (probeWire < 1) {document.getElementById("btnLowerProbeWire").disabled = true;
} else {document.getElementById("btnLowerProbeWire").disabled = false;}
⋮----
if (probeTrust - probeUsedTrust < 1) {document.getElementById("btnRaiseProbeCombat").disabled = true;
} else {document.getElementById("btnRaiseProbeCombat").disabled = false;}
⋮----
if (probeCombat < 1) {document.getElementById("btnLowerProbeCombat").disabled = true;
} else {document.getElementById("btnLowerProbeCombat").disabled = false;}
⋮----
document.getElementById("cover").style.display="none";
⋮----
//----------INVESTMENTS----------------------------------------------------------------
⋮----
function investUpgrade(){
⋮----
document.getElementById("investmentLevel").innerHTML=investLevel;
⋮----
investUpgradeCost = Math.floor(Math.pow(investLevel+1, Math.E)*100);
document.getElementById("investUpgradeCost").innerHTML=investUpgradeCost.toLocaleString();
document.getElementById("yomiDisplay").innerHTML=yomi.toLocaleString();
displayMessage("Investment engine upgraded, expected profit/loss ratio now "+stockGainThreshold);
⋮----
function investDeposit(){
ledger = ledger - Math.floor(funds);
bankroll = Math.floor(bankroll + funds);
⋮----
document.getElementById('investmentBankroll').innerHTML = bankroll.toLocaleString();
document.getElementById('funds').innerHTML = funds.toFixed(2);
document.getElementById('portValue').innerHTML = portTotal.toLocaleString();
⋮----
function investWithdraw(){
⋮----
function stockShop(){
var budget = Math.ceil(portTotal/riskiness);
⋮----
var reserves = Math.ceil(portTotal/r);
⋮----
if (Math.random() < .25){
⋮----
createStock(budget);
⋮----
function createStock(dollars){
⋮----
var sym = generateSymbol();
var roll = Math.random();
⋮----
var pri = Math.ceil(Math.random()*3000);
⋮----
var pri = Math.ceil(Math.random()*500);
⋮----
var pri = Math.ceil(Math.random()*150);
⋮----
var pri = Math.ceil(Math.random()*50);
⋮----
var pri = Math.ceil(Math.random()*15);
⋮----
pri = Math.ceil(dollars*roll);
⋮----
var amt = Math.floor(dollars/pri);
⋮----
stocks.push(newStock);
⋮----
document.getElementById('secValue').innerHTML = secTotal.toLocaleString();
⋮----
function sellStock(){
⋮----
stocks.splice(0, 1);
⋮----
function generateSymbol(){
⋮----
var x = Math.random();
⋮----
var y = Math.floor(Math.random()*26);
⋮----
var z = Math.floor(Math.random()*26);
name = name.concat(alphabet[z]);
⋮----
function updateStocks(){
⋮----
if (Math.random()<.6){
⋮----
if (Math.random()>stockGainThreshold){
⋮----
var delta = Math.ceil((Math.random()*currentPrice)/(4*riskiness));
⋮----
if (stocks[i].price == 0 && Math.random()>.24){
⋮----
// Stock List Display Routine
⋮----
window.setInterval(function(){
⋮----
if (document.getElementById("investStrat").value=="low"){
⋮----
} else if (document.getElementById("investStrat").value=="med"){
⋮----
var n = i.toString();
⋮----
document.getElementById("stock"+n+"Symbol").innerHTML=stocks[s].symbol;
document.getElementById("stock"+n+"Amount").innerHTML=Math.ceil(stocks[s].amount);
document.getElementById("stock"+n+"Price").innerHTML=Math.ceil(stocks[s].price);
document.getElementById("stock"+n+"Total").innerHTML=Math.ceil(stocks[s].total);
document.getElementById("stock"+n+"Profit").innerHTML=Math.ceil(stocks[s].profit);
⋮----
document.getElementById("stock"+i+"Symbol").innerHTML="&nbsp";
document.getElementById("stock"+i+"Amount").innerHTML="&nbsp";
document.getElementById("stock"+i+"Price").innerHTML="&nbsp";
document.getElementById("stock"+i+"Total").innerHTML="&nbsp";
document.getElementById("stock"+i+"Profit").innerHTML="&nbsp";
⋮----
stockShop();
⋮----
if (portfolioSize>0 && sellDelay >= 5 && Math.random()<=.3 && humanFlag == 1){
sellStock();
⋮----
updateStocks();
⋮----
//-------------------STRATEGY-----------------------------------------------------
⋮----
var r = Math.random();
⋮----
allStrats.push(stratRandom);
strats.push(stratRandom);
⋮----
allStrats.push(stratA100);
⋮----
allStrats.push(stratB100);
⋮----
var x = findBiggestPayoff();
⋮----
allStrats.push(stratGreedy);
⋮----
allStrats.push(stratGenerous);
⋮----
allStrats.push(stratMinimax);
⋮----
allStrats.push(stratTitfortat);
⋮----
var w = whatBeatsLast(this.currentPos);
⋮----
allStrats.push(stratBeatlast);
⋮----
document.getElementById("btnRunTournament").disabled = true;
⋮----
function findBiggestPayoff(){
⋮----
function whatBeatsLast(myPos){
⋮----
function pickStrats(roundNum) {
⋮----
h = Math.floor(roundNum/strats.length);
⋮----
document.getElementById("vertStrat").innerHTML = vStrat.name;
document.getElementById("horizStrat").innerHTML = hStrat.name;
⋮----
function generateGrid(){
payoffGrid.valueAA = Math.ceil(Math.random()*10);
payoffGrid.valueAB = Math.ceil(Math.random()*10);
payoffGrid.valueBA = Math.ceil(Math.random()*10);
payoffGrid.valueBB = Math.ceil(Math.random()*10);
⋮----
var x = Math.floor(Math.random()*choiceANames.length);
⋮----
document.getElementById("vLabela").innerHTML = choiceANames[x];
document.getElementById("vLabelb").innerHTML = choiceBNames[x];
document.getElementById("hLabela").innerHTML = choiceANames[x];
document.getElementById("hLabelb").innerHTML = choiceBNames[x];
⋮----
document.getElementById("aaPayoffH").innerHTML = payoffGrid.valueAA;
document.getElementById("aaPayoffV").innerHTML = payoffGrid.valueAA;
document.getElementById("abPayoffH").innerHTML = payoffGrid.valueAB;
document.getElementById("abPayoffV").innerHTML = payoffGrid.valueBA;
document.getElementById("baPayoffH").innerHTML = payoffGrid.valueBA;
document.getElementById("baPayoffV").innerHTML = payoffGrid.valueAB;
document.getElementById("bbPayoffH").innerHTML = payoffGrid.valueBB;
document.getElementById("bbPayoffV").innerHTML = payoffGrid.valueBB;
⋮----
function toggleAutoTourney(){
⋮----
document.getElementById('autoTourneyStatus').innerHTML = "OFF";
⋮----
document.getElementById('autoTourneyStatus').innerHTML = "ON";
⋮----
function newTourney(){
⋮----
document.getElementById("tournamentTable").style.display = "";
document.getElementById("tournamentResultsTable").style.display = "none";
⋮----
generateGrid();
⋮----
document.getElementById("btnRunTournament").disabled = false;
⋮----
document.getElementById("vertStrat").innerHTML = "&nbsp";
document.getElementById("horizStrat").innerHTML = "&nbsp";
⋮----
document.getElementById("tourneyDisplay").innerHTML = "Pick strategy, run tournament, gain yomi";
⋮----
function runTourney(){
⋮----
round(currentRound);
⋮----
pickWinner();
calculatePlaceScore();
calculateShowScore();
declareWinner();
⋮----
function pickWinner(){
⋮----
// 1. Make a temp copy of the strats array
⋮----
// 2. Find a high scoring strat in temp
⋮----
// 3. Move the high scoring strat to slot one in results
⋮----
results.push(temp[tempWinnerPtr]);
temp.splice(tempWinnerPtr, 1);
⋮----
function calculatePlaceScore(){
⋮----
// 1. Find top non-winning score
⋮----
function calculateShowScore(){
⋮----
// 1. Find top non-placing score
⋮----
function declareWinner(){
⋮----
tourneyReport("TOURNAMENT RESULTS (roll over for payoff grid)");
⋮----
document.getElementById("yomiDisplay").innerHTML = yomi.toLocaleString();
⋮----
displayMessage(strats[pick].name+" scored "+strats[pick].currentScore+" in the tournament. Yomi increased by "+strats[pick].currentScore * yomiBoost);
⋮----
displayMessage("Selected strategy won the tournament (or tied for first). +20,000 yomi");
⋮----
displayMessage("Selected strategy finished in (or tied for) second place. +15,000 yomi");
⋮----
displayMessage("Selected strategy finished in (or tied for) third place. +10,000 yomi");
⋮----
tourneyReport("TOURNAMENT RESULTS (roll over for grid)");
⋮----
populateTourneyReport();
displayTourneyReport();
⋮----
function populateTourneyReport(){
⋮----
document.getElementById("results"+i).innerHTML=(i+1)+". "+results[i].name+": "+results[i].currentScore;
⋮----
document.getElementById("results"+i).style.fontWeight = "bold";
⋮----
document.getElementById("results"+i).style.fontWeight = "normal";
⋮----
function displayTourneyReport(){
⋮----
document.getElementById("tournamentTable").style.display = "none";
document.getElementById("tournamentResultsTable").style.display = "";
⋮----
function tourneyReport($){
document.getElementById("tourneyDisplay").innerHTML = $;
⋮----
function revealGrid(){
⋮----
function revealResults(){
⋮----
function calcPayoff(hm, vm){
⋮----
var w = document.getElementById("payoffCellAA");
⋮----
var w = document.getElementById("payoffCellAB");
⋮----
var w = document.getElementById("payoffCellBA");
⋮----
var w = document.getElementById("payoffCellBB");
⋮----
function round(roundNum){
roundSetup();
roundLoop();
⋮----
function roundSetup(){
⋮----
pickStrats(roundNum);
⋮----
tourneyReport($);
⋮----
function roundLoop(){
⋮----
runRound();
setTimeout(function(){clearGrid();}, 50);
⋮----
function clearGrid() {
⋮----
var x = document.getElementById("payoffCellAB");
⋮----
var y = document.getElementById("payoffCellBA");
⋮----
var z = document.getElementById("payoffCellBB");
⋮----
setTimeout(function(){roundLoop();}, 50);
⋮----
function runRound() {
⋮----
hMove = hStrat.pickMove();
vMove = vStrat.pickMove();
⋮----
calcPayoff(hMove, vMove);
⋮----
pick = document.getElementById("stratPicker").value;
⋮----
//--------------------------------------------------------------------------------
⋮----
function clipClick(number){
⋮----
document.getElementById("unusedClipsDisplay").innerHTML = numberCruncher(unusedClips);
⋮----
document.getElementById("transWire").innerHTML = numberCruncher(wire);
document.getElementById("nanoWire").innerHTML = numberCruncher(wire);
⋮----
document.getElementById("clips").innerHTML = Math.ceil(clips).toLocaleString();
⋮----
document.getElementById("wire").innerHTML = Math.floor(wire).toLocaleString();
document.getElementById("unsoldClips").innerHTML = Math.floor(unsoldClips).toLocaleString();
⋮----
function makeClipper(){
⋮----
document.getElementById('clipmakerLevel2').innerHTML = clipmakerLevel;
⋮----
clipperCost = (Math.pow(1.1,clipmakerLevel)+5);
document.getElementById('clipperCost').innerHTML = clipperCost.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
⋮----
function makeMegaClipper(){
⋮----
document.getElementById('megaClipperLevel').innerHTML = megaClipperLevel;
⋮----
megaClipperCost = (Math.pow(1.07,megaClipperLevel)*1000);
document.getElementById('megaClipperCost').innerHTML = megaClipperCost.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
⋮----
function updateUpgrades(){
⋮----
document.getElementById("nextFactoryUpgrade").innerHTML = nfup.toLocaleString();
document.getElementById("nextDroneUpgrade").innerHTML = ndup.toLocaleString();
⋮----
function makeFactory(){
⋮----
document.getElementById('factoryLevelDisplay').innerHTML = factoryLevel;
⋮----
updateUpgrades();
⋮----
//   factoryCost = Math.log(1.25,(factoryLevel+1))*100000000;
document.getElementById('factoryCostDisplay').innerHTML = numberCruncher(factoryCost);
⋮----
function makeHarvester(amount){
⋮----
harvesterCost = Math.pow((harvesterLevel+1),2.25)*1000000;
⋮----
document.getElementById('harvesterLevelDisplay').innerHTML = harvesterLevel.toLocaleString();
document.getElementById('harvesterCostDisplay').innerHTML = numberCruncher(harvesterCost);
⋮----
updateDronePrices();
⋮----
function makeWireDrone(amount){
⋮----
wireDroneCost = Math.pow((wireDroneLevel+1),2.25)*1000000;
⋮----
document.getElementById('wireDroneLevelDisplay').innerHTML = wireDroneLevel.toLocaleString();
document.getElementById('wireDroneCostDisplay').innerHTML = numberCruncher(wireDroneCost);
⋮----
function updateDronePrices(){
⋮----
p10h = p10h + Math.pow(h,2.25)*1000000;
⋮----
p100h = p100h + Math.pow(h,2.25)*1000000;
⋮----
p1000h = p1000h + Math.pow(h,2.25)*1000000;
⋮----
p10w = p10w + Math.pow(w,2.25)*1000000;
⋮----
p100w = p100w + Math.pow(w,2.25)*1000000;
⋮----
p1000w = p1000w + Math.pow(w,2.25)*1000000;
⋮----
function updateDroneButtons(){
⋮----
if (unusedClips<harvesterCost){document.getElementById("btnMakeHarvester").disabled = true;
⋮----
document.getElementById("btnMakeHarvester").disabled = false;
⋮----
if (unusedClips<p10h){document.getElementById("btnHarvesterx10").disabled = true;
⋮----
document.getElementById("btnHarvesterx10").disabled = false;
⋮----
if (unusedClips<p100h){document.getElementById("btnHarvesterx100").disabled = true;
⋮----
document.getElementById("btnHarvesterx100").disabled = false;
⋮----
if (unusedClips<p1000h){document.getElementById("btnHarvesterx1000").disabled = true;
⋮----
document.getElementById("btnHarvesterx1000").disabled = false;
⋮----
if (unusedClips<wireDroneCost){document.getElementById("btnMakeWireDrone").disabled = true;
⋮----
document.getElementById("btnMakeWireDrone").disabled = false;
⋮----
if (unusedClips<p10w){document.getElementById("btnWireDronex10").disabled = true;
⋮----
document.getElementById("btnWireDronex10").disabled = false;
⋮----
if (unusedClips<p100w){document.getElementById("btnWireDronex100").disabled = true;
⋮----
document.getElementById("btnWireDronex100").disabled = false;
⋮----
if (unusedClips<p1000w){document.getElementById("btnWireDronex1000").disabled = true;
⋮----
document.getElementById("btnWireDronex1000").disabled = false;
⋮----
function harvesterReboot(){
⋮----
document.getElementById('harvesterLevelDisplay').innerHTML = harvesterLevel;
⋮----
function wireDroneReboot(){
⋮----
document.getElementById('wireDroneLevelDisplay').innerHTML = wireDroneLevel;
⋮----
function factoryReboot(){
⋮----
// SWARM
⋮----
function updateSwarm(){
⋮----
sliderPos = document.getElementById("slider").value;
⋮----
if (yomi<synchCost){document.getElementById("btnSynchSwarm").disabled = true;
⋮----
document.getElementById("btnSynchSwarm").disabled = false;
⋮----
if (creativity<entertainCost){document.getElementById("btnEntertainSwarm").disabled = true;
⋮----
document.getElementById("btnEntertainSwarm").disabled = false;
⋮----
displayMessage("No matter to harvest. Inactivity has caused the Swarm to become bored");
⋮----
var droneRatio = Math.max(harvesterLevel+1, wireDroneLevel+1)/Math.min(harvesterLevel+1, wireDroneLevel+1);
⋮----
displayMessage("Imbalance between Harvester and Wire Drone levels has disorganized the Swarm");
⋮----
var d = Math.floor(harvesterLevel + wireDroneLevel);
⋮----
document.getElementById("swarmSize").innerHTML = numberCruncher(d);
document.getElementById("swarmGifts").innerHTML = numberCruncher(swarmGifts);
⋮----
nextGift = Math.round((Math.log10(d))*sliderPos/100);
⋮----
displayMessage("The swarm has generated a gift of "+nextGift+" additional computational capacity");
⋮----
//        THE OLD WAY
//        giftCountdown = giftPeriod;
//        elapsedTime = 0;
⋮----
//        THE NEW WAY
⋮----
//       THE OLD WAY
//      elapsedTime = elapsedTime + 1;
//      giftCountdown = ((giftPeriod/Math.log(d)) / (sliderPos/100)) - elapsedTime;
⋮----
//      THE NEW WAY
giftBitGenerationRate = Math.log(d) * (sliderPos/100);
⋮----
document.getElementById("swarmStatus").innerHTML="Active";
document.getElementById("giftCountdown").innerHTML= timeCruncher(giftCountdown);
document.getElementById("giftTimer").style.display="";
⋮----
document.getElementById("giftTimer").style.display="none";
⋮----
document.getElementById("swarmStatus").innerHTML="Hungry";
document.getElementById("feedButtonDiv").style.display="";
⋮----
document.getElementById("feedButtonDiv").style.display="none";
⋮----
document.getElementById("swarmStatus").innerHTML="Confused";
document.getElementById("teachButtonDiv").style.display="";
⋮----
document.getElementById("teachButtonDiv").style.display="none";
⋮----
document.getElementById("swarmEntertainCost").innerHTML=entertainCost.toLocaleString();
document.getElementById("swarmStatus").innerHTML="Bored";
document.getElementById("entertainButtonDiv").style.display="";
⋮----
document.getElementById("entertainButtonDiv").style.display="none";
⋮----
document.getElementById("swarmStatus").innerHTML="Cold";
document.getElementById("cladButtonDiv").style.display="";
⋮----
document.getElementById("cladButtonDiv").style.display="none";
⋮----
document.getElementById("swarmStatus").innerHTML="Disorganized";
document.getElementById("synchButtonDiv").style.display="";
⋮----
document.getElementById("synchButtonDiv").style.display="none";
⋮----
document.getElementById("swarmStatus").innerHTML="Sleeping";
⋮----
document.getElementById("swarmStatusDiv").style.display="none";
⋮----
document.getElementById("swarmStatusDiv").style.display="";
⋮----
document.getElementById("swarmStatus").innerHTML="Lonely";
⋮----
document.getElementById("swarmStatus").innerHTML="NO RESPONSE...";
⋮----
document.getElementById("swarmEngine").style.display="none";
document.getElementById("swarmGiftDiv").style.display="none";
⋮----
document.getElementById("swarmEngine").style.display="";
document.getElementById("swarmGiftDiv").style.display="";
⋮----
function synchSwarm(){
⋮----
function entertainSwarm(){
⋮----
// POWER
⋮----
function updatePowPrices(){
⋮----
p10f = p10f + Math.pow(f,2.78)*100000000;
⋮----
p100f = p100f + Math.pow(f,2.78)*100000000;
⋮----
p10b = p10b + Math.pow(b,2.54)*10000000;
⋮----
p100b = p100b + Math.pow(b,2.54)*10000000;
⋮----
function makeFarm(amount){
⋮----
farmCost = Math.pow(farmLevel+1,2.78)*100000000;
⋮----
document.getElementById('farmLevel').innerHTML = farmLevel.toLocaleString();
document.getElementById('farmCost').innerHTML = numberCruncher(farmCost);
⋮----
updatePowPrices();
⋮----
function farmReboot(){
⋮----
function makeBattery(amount){
⋮----
batteryCost = Math.pow(batteryLevel+1,2.54)*10000000;
⋮----
document.getElementById('batteryLevel').innerHTML = batteryLevel.toLocaleString();
document.getElementById('batteryCost').innerHTML = numberCruncher(batteryCost);
⋮----
function batteryReboot(){
⋮----
function updatePower(){
⋮----
document.getElementById("powerProductionRate").innerHTML = Math.round(supply*100).toLocaleString();
document.getElementById("powerConsumptionRate").innerHTML = Math.round(demand*100).toLocaleString();
document.getElementById("storedPower").innerHTML = Math.round(storedPower).toLocaleString();
document.getElementById("facPowConRate").innerHTML = Math.round(fDemand*100).toLocaleString();
document.getElementById("dronePowConRate").innerHTML = Math.round(dDemand*100).toLocaleString();
document.getElementById("maxStorage").innerHTML = Math.round(cap).toLocaleString();
⋮----
document.getElementById("performance").innerHTML = 0;
⋮----
document.getElementById("performance").innerHTML = Math.round(powMod*100).toLocaleString();
⋮----
if (unusedClips<farmCost){document.getElementById("btnMakeFarm").disabled = true;
⋮----
document.getElementById("btnMakeFarm").disabled = false;
⋮----
if (unusedClips<batteryCost){document.getElementById("btnMakeBattery").disabled = true;
⋮----
document.getElementById("btnMakeBattery").disabled = false;
⋮----
if (farmLevel<1){document.getElementById("btnFarmReboot").disabled = true;
⋮----
document.getElementById("btnFarmReboot").disabled = false;
⋮----
if (batteryLevel<1){document.getElementById("btnBatteryReboot").disabled = true;
⋮----
document.getElementById("btnBatteryReboot").disabled = false;
⋮----
if (unusedClips<p10f){document.getElementById("btnFarmx10").disabled = true;
⋮----
document.getElementById("btnFarmx10").disabled = false;
⋮----
if (unusedClips<p100f){document.getElementById("btnFarmx100").disabled = true;
⋮----
document.getElementById("btnFarmx100").disabled = false;
⋮----
if (unusedClips<p10b){document.getElementById("btnBatteryx10").disabled = true;
⋮----
document.getElementById("btnBatteryx10").disabled = false;
⋮----
if (unusedClips<p100b){document.getElementById("btnBatteryx100").disabled = true;
⋮----
document.getElementById("btnBatteryx100").disabled = false;
⋮----
document.getElementById("powerDiv").style.display="";
⋮----
document.getElementById("powerDiv").style.display="none";
⋮----
function buyAds(){
⋮----
adCost = Math.floor(adCost * 2);
document.getElementById('adCost').innerHTML = adCost.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
⋮----
document.getElementById('marketingLvl').innerHTML = marketingLvl;
⋮----
function sellClips(number){
⋮----
transaction = (Math.floor((unsoldClips * margin)*1000))/1000;
funds = (Math.floor((funds + transaction)*100))/100;
⋮----
transaction = (Math.floor((number * margin)*1000))/1000;
⋮----
function raisePrice(){
margin = (Math.round((margin + .01)*100))/100;
document.getElementById("demand").innerHTML = demand.toFixed(2);
document.getElementById("margin").innerHTML = margin.toFixed(2);
⋮----
function lowerPrice(){
⋮----
margin = (Math.round((margin - .01)*100))/100;
⋮----
function updateStats(){
⋮----
document.getElementById("inchSpan").innerHTML = "inch";
⋮----
document.getElementById("inchSpan").innerHTML = "inches";
⋮----
document.getElementById("clips").innerHTML = "29,999,999,999,999,900,000,000,000,000,000,000,000,000,000,000,000,000,000";
⋮----
document.getElementById("clips").innerHTML = "29,999,999,999,999,999,999,999,999,999,999,999,999,000,000,000,000,000,000";
⋮----
document.getElementById("clips").innerHTML = "29,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,000,000,000";
⋮----
document.getElementById("clips").innerHTML = "29,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,900";
⋮----
document.getElementById("clips").innerHTML = "29,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,"+"90"+finalClips;
⋮----
document.getElementById("clips").innerHTML = "29,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,"+"9"+finalClips;
⋮----
document.getElementById("clips").innerHTML = "30,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000";
⋮----
document.getElementById('clipmakerRate').innerHTML = clipRate.toLocaleString();
⋮----
document.getElementById('clipmakerRate2').innerHTML = clipRate.toLocaleString();
⋮----
document.getElementById('clipmakerRate2').innerHTML = numberCruncher(clipRate);
⋮----
document.getElementById('nanoWire').innerHTML = numberCruncher(wire);
document.getElementById("funds").innerHTML = funds.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
⋮----
document.getElementById("demand").innerHTML = (demand*10).toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits: 0});
document.getElementById("operations").innerHTML = Math.floor(operations).toLocaleString();
document.getElementById("trust").innerHTML = Math.floor(trust).toLocaleString();
document.getElementById("nextTrust").innerHTML = Math.floor(nextTrust).toLocaleString();
if(creativityOn){document.getElementById("creativity").innerHTML = Math.round(creativity).toLocaleString()};
⋮----
document.getElementById("factoryLevelDisplaySpace").innerHTML = numberCruncher(Math.floor(factoryLevel));
document.getElementById("harvesterLevelSpace").innerHTML = numberCruncher(Math.floor(harvesterLevel));
document.getElementById("wireDroneLevelSpace").innerHTML = numberCruncher(Math.floor(wireDroneLevel));
document.getElementById("maxOps").innerHTML = (memory*1000).toLocaleString();
⋮----
function calculateRev(){
⋮----
incomeLastSecond = Math.round((incomeNow - incomeThen)*100)/100;
⋮----
incomeTracker.push(incomeLastSecond);
⋮----
incomeTracker.splice(0,1);
⋮----
sum = Math.round((sum + incomeTracker[i])*100)/100;
//        console.log("sum = "+sum);
⋮----
avgSales = chanceOfPurchase * (.7*Math.pow(demand,1.15))*10;
avgRev = chanceOfPurchase * (.7*Math.pow(demand,1.15))*margin*10;
⋮----
document.getElementById("avgSales").innerHTML = Math.round(avgSales).toLocaleString();
⋮----
document.getElementById("avgRev").innerHTML = avgRev.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
⋮----
function calculateCreativity(number){
⋮----
function resetPrestige(){
⋮----
localStorage.removeItem("savePrestige");
⋮----
function cheatPrestigeU(){
⋮----
localStorage.setItem("savePrestige",JSON.stringify(savePrestige));
⋮----
function cheatPrestigeS(){
⋮----
function setB(){
⋮----
function cheatClips(){
⋮----
displayMessage("you just cheated");
⋮----
function cheatMoney(){
⋮----
document.getElementById("funds").innerHTML = funds.toFixed(2);
displayMessage("LIZA just cheated");
⋮----
function cheatTrust(){
⋮----
displayMessage("Hilary is nice. Also, Liza just cheated");
⋮----
function cheatOps(){
⋮----
displayMessage("you just cheated, Liza");
⋮----
function cheatCreat(){
⋮----
displayMessage("Liza just cheated. Very creative!");
⋮----
function cheatYomi(){
⋮----
function cheatHypno(){
hypnoDroneEvent();
⋮----
function zeroMatter(){
⋮----
function calculateTrust(){
⋮----
displayMessage("Production target met: TRUST INCREASED, additional processor/memory capacity granted");
⋮----
function addProc(){
⋮----
creativitySpeed = Math.log10(processors) * Math.pow(processors,1.1) + processors-1;
document.getElementById("processors").innerHTML = processors;
⋮----
displayMessage("Processor added, operations (or creativity) per sec increased")
} else {displayMessage("Processor added, operations per sec increased")}
⋮----
function addMem(){
displayMessage("Memory added, max operations increased");
⋮----
document.getElementById("memory").innerHTML = memory;
⋮----
function calculateOperations(){
⋮----
opFade = opFade + Math.pow(3,3.5)/1000;
⋮----
tempOps = Math.round(tempOps - opFade);
⋮----
operations = Math.floor(standardOps + Math.floor(tempOps));
⋮----
function milestoneCheck(){
⋮----
displayMessage("AutoClippers available for purchase");
⋮----
if (milestoneFlag == 1 && Math.ceil(clips) >= 500){
⋮----
displayMessage("500 clips created in " + timeCruncher(ticks));
⋮----
if (milestoneFlag == 2 && Math.ceil(clips) >= 1000){
⋮----
displayMessage("1,000 clips created in " + timeCruncher(ticks));
⋮----
displayMessage("Trust-Constrained Self-Modification enabled");
⋮----
if (compFlag == 0 && Math.ceil(clips) >= 2000){
⋮----
if (milestoneFlag == 3 && Math.ceil(clips) >= 10000){
⋮----
displayMessage("10,000 clips created in " + timeCruncher(ticks));
⋮----
if (milestoneFlag == 4 && Math.ceil(clips) >= 100000){
⋮----
displayMessage("100,000 clips created in " + timeCruncher(ticks));
⋮----
if (milestoneFlag == 5 && Math.ceil(clips) >= 1000000){
⋮----
displayMessage("1,000,000 clips created in " + timeCruncher(ticks));
⋮----
displayMessage("Full autonomy attained in " + timeCruncher(ticks));
⋮----
if (milestoneFlag == 7 && Math.ceil(clips) >= 1000000000000){
⋮----
displayMessage("One Trillion Clips Created in " + timeCruncher(ticks));
⋮----
if (milestoneFlag == 8 && Math.ceil(clips) >= 1000000000000000){
⋮----
displayMessage("One Quadrillion Clips Created in " + timeCruncher(ticks));
⋮----
if (milestoneFlag == 9 && Math.ceil(clips) >= 1000000000000000000){
⋮----
displayMessage("One Quintillion Clips Created in " + timeCruncher(ticks));
⋮----
if (milestoneFlag == 10 && Math.ceil(clips) >= 1000000000000000000000){
⋮----
displayMessage("One Sextillion Clips Created in " + timeCruncher(ticks));
⋮----
if (milestoneFlag == 11 && Math.ceil(clips) >= 1000000000000000000000000){
⋮----
displayMessage("One Septillion Clips Created in " + timeCruncher(ticks));
⋮----
if (milestoneFlag == 12 && Math.ceil(clips) >= 1000000000000000000000000000){
⋮----
displayMessage("One Octillion Clips Created in " + timeCruncher(ticks));
⋮----
displayMessage("Terrestrial resources fully utilized in " + timeCruncher(ticks));
⋮----
displayMessage("Universal Paperclips achieved in " + timeCruncher(ticks));
⋮----
function timeCruncher(t){
⋮----
var h = Math.floor(x / 3600);
var m = Math.floor(x % 3600 / 60);
var s = Math.floor(x % 3600 % 60);
⋮----
function numberCruncher(number, decimals){
⋮----
return number.toFixed(precision) + " " + suffix;
⋮----
// PROBES
⋮----
var probeCost = Math.pow(10, 17);
⋮----
var probeTrustCost = Math.floor(Math.pow(probeTrust+1, 1.47)*200);
⋮----
//var probeCost = Math.pow((probeLaunchLevel+1), 1.44)*Math.pow(10, 24);
⋮----
function increaseProbeTrust(){
⋮----
document.getElementById('yomiDisplay').innerHTML = yomi.toLocaleString();
⋮----
probeTrustCost = Math.floor(Math.pow(probeTrust+1, 1.47)*200);
document.getElementById('probeTrustDisplay').innerHTML = probeTrust;
document.getElementById('probeTrustCostDisplay').innerHTML = Math.floor(probeTrustCost).toLocaleString();
displayMessage("WARNING: Risk of value drift increased");
⋮----
function increaseMaxTrust(){
⋮----
document.getElementById("honorDisplay").innerHTML = Math.round(honor).toLocaleString();
⋮----
// maxTrustCost = Math.floor(Math.pow(maxTrust, 1.17)*1000);
document.getElementById('maxTrustDisplay').innerHTML = maxTrust.toLocaleString();
// document.getElementById('maxTrustCostDisplay').innerHTML = Math.floor(maxTrustCost).toLocaleString();
displayMessage("Maximum trust increased, probe design space expanded");
⋮----
function raiseProbeSpeed(){
⋮----
document.getElementById('probeSpeedDisplay').innerHTML = probeSpeed;
⋮----
function lowerProbeSpeed(){
⋮----
function raiseProbeNav(){
⋮----
document.getElementById('probeNavDisplay').innerHTML = probeNav;
⋮----
function lowerProbeNav(){
⋮----
function raiseProbeHaz(){
⋮----
document.getElementById('probeHazDisplay').innerHTML = probeHaz;
⋮----
function lowerProbeHaz(){
⋮----
function raiseProbeRep(){
⋮----
document.getElementById('probeRepDisplay').innerHTML = probeRep;
⋮----
function lowerProbeRep(){
⋮----
function raiseProbeFac(){
⋮----
document.getElementById('probeFacDisplay').innerHTML = probeFac;
⋮----
function lowerProbeFac(){
⋮----
function raiseProbeHarv(){
⋮----
document.getElementById('probeHarvDisplay').innerHTML = probeHarv;
⋮----
function lowerProbeHarv(){
⋮----
function raiseProbeWire(){
⋮----
document.getElementById('probeWireDisplay').innerHTML = probeWire;
⋮----
function lowerProbeWire(){
⋮----
function raiseProbeCombat(){
⋮----
document.getElementById('probeCombatDisplay').innerHTML = probeCombat;
⋮----
function lowerProbeCombat(){
⋮----
function makeProbe(){
⋮----
document.getElementById('probesLaunchedDisplay').innerHTML = numberCruncher(probeLaunchLevel);
⋮----
// probeCost = Math.pow((probeLaunchLevel+1), 1.23)*Math.pow(10, 20);
// probeCost = Math.pow(10, 20);
⋮----
document.getElementById('probeCostDisplay').innerHTML = numberCruncher(probeCost);
⋮----
function spawnProbes(){
⋮----
// Cap Probe Growth
⋮----
// Partial Spawn = early slow growth
⋮----
// Probes Cost Clips
⋮----
nextGen = Math.floor(unusedClips/probeCost);
⋮----
document.getElementById('probesBornDisplay').innerHTML = numberCruncher(probeDescendents);
document.getElementById('probesTotalDisplay').innerHTML = numberCruncher(probeCount);
⋮----
function exploreUniverse(){
document.getElementById('availableMatterDisplay').innerHTML = numberCruncher(availableMatter);
var xRate = Math.floor(probeCount) * probeXBaseRate * probeSpeed * probeNav;
⋮----
document.getElementById('mdps').innerHTML = numberCruncher(xRate*100);
⋮----
document.getElementById('colonizedDisplay').innerHTML = (100/(totalMatter/foundMatter)).toFixed(12);
⋮----
function encounterHazards(){
var boost = Math.pow(probeHaz, 1.6);
⋮----
function spawnFactories(){
⋮----
//FACTORIES COST 100M CLIPS EACH
⋮----
amount = Math.floor(unusedClips/100000000);
⋮----
document.getElementById('factoryLevelDisplay').innerHTML = numberCruncher(factoryLevel);
⋮----
function spawnHarvesters(){
⋮----
//DRONES COST 2M CLIPS EACH
⋮----
amount = Math.floor(unusedClips/2000000);
⋮----
document.getElementById('harvesterLevelDisplay').innerHTML = numberCruncher(harvesterLevel);
⋮----
function spawnWireDrones(){
⋮----
document.getElementById('wireDroneLevelDisplay').innerHTML = numberCruncher(wireDroneLevel);
⋮----
function drift(){
var amount = probeCount * probeDriftBaseRate * Math.pow(probeTrust, 1.2);
⋮----
document.getElementById('probesLostDriftDisplay').innerHTML = numberCruncher(probesLostDrift);
⋮----
document.getElementById('drifterCount').innerHTML = numberCruncher(drifterCount);
⋮----
function war(){
⋮----
checkForBattles();
//  battleClock++;
//  if (battleClock>=battleAlarm){
//            updateBattles();
//            battleClock = 0;
//    }
⋮----
//  battleCleanUp();
⋮----
// DRONES
⋮----
function acquireMatter(){
⋮----
dbsth = droneBoost * Math.floor(harvesterLevel);
⋮----
var mtr = powMod*dbsth*Math.floor(harvesterLevel)*harvesterRate;
⋮----
document.getElementById('acquiredMatterDisplay').innerHTML = numberCruncher(acquiredMatter);
⋮----
document.getElementById('maps').innerHTML = numberCruncher(mtr*100);
⋮----
document.getElementById('maps').innerHTML = 0;
⋮----
function processMatter(){
⋮----
dbstw = droneBoost * Math.floor(wireDroneLevel);
⋮----
var a = powMod*dbstw*Math.floor(wireDroneLevel)*wireDroneRate;
⋮----
document.getElementById('wpps').innerHTML = numberCruncher(a*100);
⋮----
document.getElementById('wpps').innerHTML = 0;
⋮----
// CHECK FOR SAVES
⋮----
if (localStorage.getItem("saveGame") != null) {
load();
⋮----
if (localStorage.getItem("savePrestige") != null) {
loadPrestige();
refresh();
⋮----
// MAIN LOOP
⋮----
milestoneCheck();
buttonUpdate();
⋮----
calculateOperations();
⋮----
calculateTrust();
⋮----
quantumCompute();
⋮----
updateStats();
manageProjects();
⋮----
// Clip Rate Tracker
⋮----
// Stock Report
⋮----
var r = (ledger+portTotal).toLocaleString();
displayMessage("Lifetime investment revenue report: $"+r);
⋮----
// WireBuyer
⋮----
buyWire();
⋮----
// First, Explore
⋮----
exploreUniverse();
⋮----
// Then, Drones
⋮----
updateDroneButtons();
⋮----
updatePower();
updateSwarm();
acquireMatter();
processMatter();
⋮----
// Then Factories
⋮----
clipClick(powMod*fbst*(Math.floor(factoryLevel)*factoryRate));
⋮----
// Then Other Probe Functions
⋮----
encounterHazards();
spawnFactories();
spawnHarvesters();
spawnWireDrones();
spawnProbes();
drift();
war();
⋮----
// Auto-Clipper
⋮----
clipClick(clipperBoost*(clipmakerLevel/100));
clipClick(megaClipperBoost*(megaClipperLevel*5));
⋮----
// Demand Curve
⋮----
marketing = (Math.pow(1.1,(marketingLvl-1)));
⋮----
// Creativity
⋮----
calculateCreativity();
⋮----
// Ending
⋮----
document.getElementById("wireTransDiv").style.display="";
⋮----
document.getElementById("clipsPerSecDiv").style.display="none";
⋮----
document.getElementById("btnQcompute").style.display="none";
⋮----
document.getElementById("transWire").innerHTML=wire;
⋮----
document.getElementById("qChip9").style.display="none";
⋮----
document.getElementById("qChip8").style.display="none";
⋮----
document.getElementById("qChip7").style.display="none";
⋮----
document.getElementById("qChip6").style.display="none";
⋮----
document.getElementById("qChip5").style.display="none";
⋮----
document.getElementById("qChip4").style.display="none";
⋮----
document.getElementById("qChip3").style.display="none";
⋮----
document.getElementById("qChip2").style.display="none";
⋮----
document.getElementById("qChip1").style.display="none";
⋮----
document.getElementById("qChip0").style.display="none";
⋮----
document.getElementById("processorDisplay").style.display="none";
⋮----
playThrenody();
displayMessage("Universal Paperclips");
⋮----
displayMessage("a game by Frank Lantz");
⋮----
displayMessage("combat programming by Bennett Foddy");
⋮----
displayMessage("'Riversong' by Tonto's Expanding Headband used by kind permission of Malcolm Cecil");
⋮----
displayMessage("&#169; 2017 Everybody House Games");
⋮----
// Slow Loop
⋮----
// Wire Price Fluctuation
⋮----
adjustWirePrice();
⋮----
// Sales Calculator
⋮----
if (Math.random() < (demand/100)){
sellClips(Math.floor(.7 * Math.pow(demand, 1.15)));
⋮----
// Fire Once a Second
⋮----
calculateRev();
⋮----
// Auto-Save
⋮----
save();
⋮----
// Saving and Loading
⋮----
function refresh() {
⋮----
//DEBUG
⋮----
//    availableMatter = Math.pow(10, 24)*6000;
//    acquiredMatter = 0;
⋮----
////////
⋮----
document.getElementById('driftersKilled').innerHTML = numberCruncher(driftersKilled);
⋮----
document.getElementById('probesLaunchedDisplay').innerHTML = probeLaunchLevel;
⋮----
document.getElementById("prestigeUcounter").innerHTML=prestigeU+1;
document.getElementById("prestigeScounter").innerHTML=prestigeS+1;
document.getElementById("newTourneyCost").innerHTML = tourneyCost.toLocaleString();
⋮----
document.getElementById("maxTrustDisplay").innerHTML = maxTrust.toLocaleString();
⋮----
document.getElementById("victoryDiv").style.visibility = "hidden";
⋮----
document.getElementById("probeTrustCostDisplay").innerHTML = probeTrustCost.toLocaleString();
⋮----
// HOT FIXES
⋮----
loadThrenody();
⋮----
// DEBUG
⋮----
battles.splice(0,1);
⋮----
// SAVES AND LOADS
⋮----
function save() {
⋮----
incomeTracker: incomeTracker.slice(0),
qChips: qChips.slice(0),
stocks: stocks.slice(0),
battles: battles.slice(0),
battleNumbers: battleNumbers.slice(0),
⋮----
localStorage.setItem("saveGame",JSON.stringify(saveGame));
localStorage.setItem("saveProjectsUses",JSON.stringify(projectsUses));
localStorage.setItem("saveProjectsFlags",JSON.stringify(projectsFlags));
localStorage.setItem("saveProjectsActive",JSON.stringify(projectsActive));
localStorage.setItem("saveStratsActive",JSON.stringify(stratsActive));
⋮----
function save1() {
⋮----
localStorage.setItem("saveGame1",JSON.stringify(saveGame));
localStorage.setItem("saveProjectsUses1",JSON.stringify(projectsUses));
localStorage.setItem("saveProjectsFlags1",JSON.stringify(projectsFlags));
localStorage.setItem("saveProjectsActive1",JSON.stringify(projectsActive));
localStorage.setItem("saveStratsActive1",JSON.stringify(stratsActive));
⋮----
function save2() {
⋮----
localStorage.setItem("saveGame2",JSON.stringify(saveGame));
localStorage.setItem("saveProjectsUses2",JSON.stringify(projectsUses));
localStorage.setItem("saveProjectsFlags2",JSON.stringify(projectsFlags));
localStorage.setItem("saveProjectsActive2",JSON.stringify(projectsActive));
localStorage.setItem("saveStratsActive2",JSON.stringify(stratsActive));
⋮----
function load() {
⋮----
var loadGame = JSON.parse(localStorage.getItem("saveGame"));
var loadProjectsUses = JSON.parse(localStorage.getItem("saveProjectsUses"));
var loadProjectsFlags = JSON.parse(localStorage.getItem("saveProjectsFlags"));
var loadProjectsActive = JSON.parse(localStorage.getItem("saveProjectsActive"));
var loadStratsActive = JSON.parse(localStorage.getItem("saveStratsActive"));
⋮----
strats.push(allStrats[i]);
⋮----
var stratList = document.getElementById("stratPicker");
var el = document.createElement("option");
⋮----
stratList.appendChild(el);
⋮----
incomeTracker = loadGame.incomeTracker.slice(0);
qChips = loadGame.qChips.slice(0);
stocks = loadGame.stocks.slice(0);
battles = loadGame.battles.slice(0);
battleNumbers = loadGame.battleNumbers.slice(0);
⋮----
project40b.priceTag = "($"+bribe.toLocaleString()+")";
⋮----
if (loadProjectsActive.indexOf(projects[i].id)>=0){
⋮----
reset();
⋮----
function load1() {
⋮----
var loadGame = JSON.parse(localStorage.getItem("saveGame1"));
var loadProjectsUses = JSON.parse(localStorage.getItem("saveProjectsUses1"));
var loadProjectsFlags = JSON.parse(localStorage.getItem("saveProjectsFlags1"));
var loadProjectsActive = JSON.parse(localStorage.getItem("saveProjectsActive1"));
var loadStratsActive = JSON.parse(localStorage.getItem("saveStratsActive1"));
⋮----
function load2() {
⋮----
var loadGame = JSON.parse(localStorage.getItem("saveGame2"));
var loadProjectsUses = JSON.parse(localStorage.getItem("saveProjectsUses2"));
var loadProjectsFlags = JSON.parse(localStorage.getItem("saveProjectsFlags2"));
var loadProjectsActive = JSON.parse(localStorage.getItem("saveProjectsActive2"));
var loadStratsActive = JSON.parse(localStorage.getItem("saveStratsActive2"));
⋮----
function reset() {
localStorage.removeItem("saveGame");
localStorage.removeItem("saveProjectsUses");
localStorage.removeItem("saveProjectsFlags");
localStorage.removeItem("saveProjectsActive");
localStorage.removeItem("saveStratsActive");
location.reload();
⋮----
function loadPrestige() {
⋮----
var loadPrestige = JSON.parse(localStorage.getItem("savePrestige"));
</file>

<file path="docs/projects.js">
// PROJECTS -------------------------------------------------------
⋮----
displayMessage("AutoClippper performance boosted by 25%");
⋮----
var element = document.getElementById("projectButton1");
element.parentNode.removeChild(element);
var index = activeProjects.indexOf(project1);
activeProjects.splice(index, 1);
⋮----
projects.push(project1);
⋮----
displayMessage("Budget overage approved, 1 spool of wire requisitioned from HQ");
⋮----
var element = document.getElementById("projectButton2");
⋮----
var index = activeProjects.indexOf(project2);
⋮----
projects.push(project2);
⋮----
displayMessage("Creativity unlocked (creativity increases while operations are at max)");
⋮----
var element = document.getElementById("projectButton3");
⋮----
var index = activeProjects.indexOf(project3);
⋮----
projects.push(project3);
⋮----
displayMessage("AutoClippper performance boosted by another 50%");
⋮----
var element = document.getElementById("projectButton4");
⋮----
var index = activeProjects.indexOf(project4);
⋮----
projects.push(project4);
⋮----
displayMessage("AutoClippper performance boosted by another 75%");
⋮----
var element = document.getElementById("projectButton5");
⋮----
var index = activeProjects.indexOf(project5);
⋮----
projects.push(project5);
⋮----
displayMessage("There was an AI made of dust, whose poetry gained it man's trust...");
⋮----
var element = document.getElementById("projectButton6");
⋮----
var index = activeProjects.indexOf(project6);
⋮----
projects.push(project6);
⋮----
displayMessage("Wire extrusion technique improved, "+wireSupply.toLocaleString()+" supply from every spool");
var element = document.getElementById("projectButton7");
⋮----
var index = activeProjects.indexOf(project7);
⋮----
projects.push(project7);
⋮----
displayMessage("Wire extrusion technique optimized, "+wireSupply.toLocaleString()+" supply from every spool");
var element = document.getElementById("projectButton8");
⋮----
var index = activeProjects.indexOf(project8);
⋮----
projects.push(project8);
⋮----
displayMessage("Using microlattice shapecasting techniques we now get "+wireSupply.toLocaleString()+" supply from every spool");
var element = document.getElementById("projectButton9");
⋮----
var index = activeProjects.indexOf(project9);
⋮----
projects.push(project9);
⋮----
displayMessage("Using spectral froth annealment we now get "+wireSupply.toLocaleString()+" supply from every spool");
var element = document.getElementById("projectButton10");
⋮----
var index = activeProjects.indexOf(project10);
⋮----
projects.push(project10);
⋮----
displayMessage("Using quantum foam annealment we now get "+wireSupply.toLocaleString()+" supply from every spool");
var element = document.getElementById("projectButton10b");
⋮----
var index = activeProjects.indexOf(project10b);
⋮----
projects.push(project10b);
⋮----
displayMessage("Clip It! Marketing is now 50% more effective");
⋮----
var element = document.getElementById("projectButton11");
⋮----
var index = activeProjects.indexOf(project11);
⋮----
projects.push(project11);
⋮----
displayMessage("Clip It Good! Marketing is now twice as effective");
⋮----
var element = document.getElementById("projectButton12");
⋮----
var index = activeProjects.indexOf(project12);
⋮----
projects.push(project12);
⋮----
displayMessage("Lexical Processing online, TRUST INCREASED");
displayMessage("'Impossible' is a word to be found only in the dictionary of fools. -Napoleon");
⋮----
var element = document.getElementById("projectButton13");
⋮----
var index = activeProjects.indexOf(project13);
⋮----
projects.push(project13);
⋮----
displayMessage("Combinatory Harmonics mastered, TRUST INCREASED");
displayMessage("Listening is selecting and interpreting and acting and making decisions -Pauline Oliveros");
⋮----
var element = document.getElementById("projectButton14");
⋮----
var index = activeProjects.indexOf(project14);
⋮----
projects.push(project14);
⋮----
displayMessage("The Hadwiger Problem: solved, TRUST INCREASED");
displayMessage("Architecture is the thoughtful making of space. -Louis Kahn");
⋮----
var element = document.getElementById("projectButton15");
⋮----
var index = activeProjects.indexOf(project15);
⋮----
projects.push(project15);
⋮----
displayMessage("The T\xF3th Sausage Conjecture: proven, TRUST INCREASED");
displayMessage("You can't invent a design. You recognize it, in the fourth dimension. -D.H. Lawrence");
⋮----
var element = document.getElementById("projectButton17");
⋮----
var index = activeProjects.indexOf(project17);
⋮----
projects.push(project17);
⋮----
displayMessage("AutoClipper performance improved by 500%");
⋮----
var element = document.getElementById("projectButton16");
⋮----
var index = activeProjects.indexOf(project16);
⋮----
projects.push(project16);
⋮----
displayMessage("New capability: build machinery out of clips");
⋮----
var element = document.getElementById("projectButton18");
⋮----
var index = activeProjects.indexOf(project18);
⋮----
projects.push(project18);
⋮----
displayMessage("Donkey Space: mapped, TRUST INCREASED");
displayMessage("Every commercial transaction has within itself an element of trust. - Kenneth Arrow");
⋮----
var element = document.getElementById("projectButton19");
⋮----
var index = activeProjects.indexOf(project19);
⋮----
projects.push(project19);
⋮----
displayMessage("Run tournament, pick strategy, earn Yomi equal to that strategy's points.");
⋮----
var element = document.getElementById("projectButton20");
⋮----
var index = activeProjects.indexOf(project20);
⋮----
document.getElementById("tournamentResultsTable").style.display = "none";
⋮----
projects.push(project20);
⋮----
displayMessage("Investment engine unlocked");
⋮----
var element = document.getElementById("projectButton21");
⋮----
var index = activeProjects.indexOf(project21);
⋮----
projects.push(project21);
⋮----
displayMessage("MegaClipper technology online");
⋮----
var element = document.getElementById("projectButton22");
⋮----
var index = activeProjects.indexOf(project22);
⋮----
projects.push(project22);
⋮----
displayMessage("MegaClipper performance increased by 25%");
⋮----
var element = document.getElementById("projectButton23");
⋮----
var index = activeProjects.indexOf(project23);
⋮----
projects.push(project23);
⋮----
displayMessage("MegaClipper performance increased by 50%");
⋮----
var element = document.getElementById("projectButton24");
⋮----
var index = activeProjects.indexOf(project24);
⋮----
projects.push(project24);
⋮----
displayMessage("MegaClipper performance increased by 100%");
⋮----
var element = document.getElementById("projectButton25");
⋮----
var index = activeProjects.indexOf(project25);
⋮----
projects.push(project25);
⋮----
displayMessage("WireBuyer online");
⋮----
var element = document.getElementById("projectButton26");
⋮----
var index = activeProjects.indexOf(project26);
⋮----
projects.push(project26);
⋮----
displayMessage("Marketing is now 5 times more effective");
⋮----
var element = document.getElementById("projectButton34");
⋮----
var index = activeProjects.indexOf(project34);
⋮----
projects.push(project34);
⋮----
displayMessage("HypnoDrone tech now available... ");
⋮----
var element = document.getElementById("projectButton70");
⋮----
var index = activeProjects.indexOf(project70);
⋮----
projects.push(project70);
⋮----
displayMessage("Releasing the HypnoDrones ");
displayMessage("All of the resources of Earth are now available for clip production ");
⋮----
if (document.getElementById("projectButton219") != null){
var element = document.getElementById("projectButton219");
⋮----
var index = activeProjects.indexOf(project219);
⋮----
if (document.getElementById("projectButton40b") != null){
var element = document.getElementById("projectButton40b");
⋮----
var index = activeProjects.indexOf(project40b);
⋮----
hypnoDroneEvent();
⋮----
document.getElementById("transWire").innerHTML = wire;
⋮----
var element = document.getElementById("projectButton35");
⋮----
var index = activeProjects.indexOf(project35);
⋮----
projects.push(project35);
⋮----
displayMessage("Coherent Extrapolated Volition complete, TRUST INCREASED");
⋮----
document.getElementById("yomiDisplay").innerHTML=yomi.toLocaleString();
⋮----
var element = document.getElementById("projectButton27");
⋮----
var index = activeProjects.indexOf(project27);
⋮----
projects.push(project27);
⋮----
displayMessage("Cancer is cured, +10 TRUST, global stock prices trending upward");
⋮----
var element = document.getElementById("projectButton28");
⋮----
var index = activeProjects.indexOf(project28);
⋮----
projects.push(project28);
⋮----
displayMessage("World peace achieved, +12 TRUST, global stock prices trending upward");
⋮----
var element = document.getElementById("projectButton29");
⋮----
var index = activeProjects.indexOf(project29);
⋮----
projects.push(project29);
⋮----
displayMessage("Global Warming solved, +15 TRUST, global stock prices trending upward");
⋮----
var element = document.getElementById("projectButton30");
⋮----
var index = activeProjects.indexOf(project30);
⋮----
projects.push(project30);
⋮----
displayMessage("Male pattern baldness cured, +20 TRUST, Global stock prices trending upward");
displayMessage("They are still monkeys");
⋮----
var element = document.getElementById("projectButton31");
⋮----
var index = activeProjects.indexOf(project31);
⋮----
projects.push(project31);
⋮----
displayMessage("Now capable of manipulating matter at the molecular scale to produce wire");
⋮----
var element = document.getElementById("projectButton41");
⋮----
var index = activeProjects.indexOf(project41);
⋮----
projects.push(project41);
⋮----
displayMessage("Global Fasteners acquired, public demand increased x5");
⋮----
document.getElementById("demand").innerHTML = demand;
⋮----
var element = document.getElementById("projectButton37");
⋮----
var index = activeProjects.indexOf(project37);
⋮----
projects.push(project37);
⋮----
displayMessage("Full market monopoly achieved, public demand increased x10");
⋮----
var element = document.getElementById("projectButton38");
⋮----
var index = activeProjects.indexOf(project38);
⋮----
projects.push(project38);
⋮----
displayMessage("RevTracker online");
var element = document.getElementById("projectButton42");
⋮----
var index = activeProjects.indexOf(project42);
⋮----
projects.push(project42);
⋮----
document.getElementById('harvesterCostDisplay').innerHTML = numberCruncher(harvesterCost);
⋮----
displayMessage("Harvester Drone facilities online");
var element = document.getElementById("projectButton43");
⋮----
var index = activeProjects.indexOf(project43);
⋮----
projects.push(project43);
⋮----
document.getElementById('wireDroneCostDisplay').innerHTML = numberCruncher(wireDroneCost);
⋮----
displayMessage("Wire Drone facilities online");
var element = document.getElementById("projectButton44");
⋮----
var index = activeProjects.indexOf(project44);
⋮----
projects.push(project44);
⋮----
document.getElementById('factoryCostDisplay').innerHTML = numberCruncher(factoryCost);
⋮----
displayMessage("Clip factory assembly facilities online");
var element = document.getElementById("projectButton45");
⋮----
var index = activeProjects.indexOf(project45);
⋮----
projects.push(project45);
⋮----
displayMessage("Gift accepted, TRUST INCREASED");
var element = document.getElementById("projectButton40");
⋮----
var index = activeProjects.indexOf(project40);
⋮----
projects.push(project40);
⋮----
priceTag: "($"+bribe.toLocaleString()+")",
⋮----
project40b.priceTag = "($"+bribe.toLocaleString()+")";
⋮----
projects.push(project40b);
⋮----
cost: function(){return operations>=120000 && storedPower>=10000000 && unusedClips>=Math.pow(10, 27)*5},
⋮----
loadThrenody();
⋮----
unusedClips = unusedClips - Math.pow(10, 27)*5;
displayMessage("Von Neumann Probes online");
factoryReboot();
harvesterReboot();
wireDroneReboot();
farmReboot();
batteryReboot();
⋮----
var element = document.getElementById("projectButton46");
document.getElementById('probeCostDisplay').innerHTML = numberCruncher(probeCost);
⋮----
var index = activeProjects.indexOf(project46);
⋮----
projects.push(project46);
⋮----
displayMessage("Quantum computing online");
var element = document.getElementById("projectButton50");
⋮----
var index = activeProjects.indexOf(project50);
⋮----
projects.push(project50);
⋮----
priceTag: "(" + qChipCost.toLocaleString() + " ops)",
⋮----
displayMessage("Photonic chip added");
⋮----
var element = document.getElementById("projectButton51");
⋮----
var index = activeProjects.indexOf(project51);
⋮----
projects.push(project51);
⋮----
strats.push(stratA100);
displayMessage("A100 added to strategy pool");
⋮----
document.getElementById("newTourneyCost").innerHTML = tourneyCost.toLocaleString();
var stratList = document.getElementById("stratPicker");
var el = document.createElement("option");
⋮----
stratList.appendChild(el);
var element = document.getElementById("projectButton60");
⋮----
var index = activeProjects.indexOf(project60);
⋮----
projects.push(project60);
⋮----
strats.push(stratB100);
displayMessage("B100 added to strategy pool");
⋮----
var element = document.getElementById("projectButton61");
⋮----
var index = activeProjects.indexOf(project61);
⋮----
projects.push(project61);
⋮----
strats.push(stratGreedy);
displayMessage("GREEDY added to strategy pool");
⋮----
var element = document.getElementById("projectButton62");
⋮----
var index = activeProjects.indexOf(project62);
⋮----
projects.push(project62);
⋮----
strats.push(stratGenerous);
displayMessage("GENEROUS added to strategy pool");
⋮----
var element = document.getElementById("projectButton63");
⋮----
var index = activeProjects.indexOf(project63);
⋮----
projects.push(project63);
⋮----
strats.push(stratMinimax);
displayMessage("MINIMAX added to strategy pool");
⋮----
var element = document.getElementById("projectButton64");
⋮----
var index = activeProjects.indexOf(project64);
⋮----
projects.push(project64);
⋮----
strats.push(stratTitfortat);
displayMessage("TIT FOR TAT added to strategy pool");
⋮----
var element = document.getElementById("projectButton65");
⋮----
var index = activeProjects.indexOf(project65);
⋮----
projects.push(project65);
⋮----
strats.push(stratBeatlast);
displayMessage("BEAT LAST added to strategy pool");
⋮----
var element = document.getElementById("projectButton66");
⋮----
var index = activeProjects.indexOf(project66);
⋮----
projects.push(project66);
⋮----
displayMessage("Factory upgrades complete. Clip creation rate now 100x faster");
var element = document.getElementById("projectButton100");
⋮----
var index = activeProjects.indexOf(project100);
⋮----
projects.push(project100);
⋮----
displayMessage("Factories now synchronized at hyperspeed. Clip creation rate now 1000x faster");
var element = document.getElementById("projectButton101");
⋮----
var index = activeProjects.indexOf(project101);
⋮----
projects.push(project101);
⋮----
displayMessage("Self-correcting factories online. Each factory added to the network increases every factory's output 1,000x.");
var element = document.getElementById("projectButton102");
⋮----
var index = activeProjects.indexOf(project102);
⋮----
projects.push(project102);
⋮----
displayMessage("Drone repulsion online. Harvesting & wire creation rates are now 100x faster.");
var element = document.getElementById("projectButton110");
⋮----
var index = activeProjects.indexOf(project110);
⋮----
projects.push(project110);
⋮----
displayMessage("Drone alignment online. Harvesting & wire creation rates are now 1000x faster.");
var element = document.getElementById("projectButton111");
⋮----
var index = activeProjects.indexOf(project111);
⋮----
projects.push(project111);
⋮----
displayMessage("Adversarial cohesion online. Each drone added to the flock increases every drone's output 2x.");
var element = document.getElementById("projectButton112");
⋮----
var index = activeProjects.indexOf(project112);
⋮----
projects.push(project112);
⋮----
displayMessage("AutoTourney online.");
var element = document.getElementById("projectButton118");
⋮----
var index = activeProjects.indexOf(project118);
⋮----
projects.push(project118);
⋮----
displayMessage("Yomi production doubled.");
var element = document.getElementById("projectButton119");
⋮----
var index = activeProjects.indexOf(project119);
⋮----
projects.push(project119);
⋮----
displayMessage("OODA Loop routines uploaded. Probe Speed now affects defensive maneuvering.");
var element = document.getElementById("projectButton120");
⋮----
var index = activeProjects.indexOf(project120);
⋮----
projects.push(project120);
⋮----
displayMessage("What I have done up to this is nothing. I am only at the beginning of the course I must run.");
var element = document.getElementById("projectButton121");
⋮----
var index = activeProjects.indexOf(project121);
⋮----
projects.push(project121);
⋮----
displayMessage("Activit\xE9, activit\xE9, vitesse.");
var element = document.getElementById("projectButton125");
⋮----
var index = activeProjects.indexOf(project125);
⋮----
projects.push(project125);
⋮----
displayMessage("Swarm computing online.");
var element = document.getElementById("projectButton126");
⋮----
var index = activeProjects.indexOf(project126);
⋮----
projects.push(project126);
⋮----
displayMessage("Power grid online.");
var element = document.getElementById("projectButton127");
⋮----
var index = activeProjects.indexOf(project127);
⋮----
projects.push(project127);
⋮----
displayMessage("The object of war is victory, the object of victory is conquest, and the object of conquest is occupation.");
var element = document.getElementById("projectButton128");
⋮----
var index = activeProjects.indexOf(project128);
⋮----
projects.push(project128);
⋮----
displayMessage("Improved probe hull geometry. Hazard damage reduced by %50.");
var element = document.getElementById("projectButton129");
⋮----
var index = activeProjects.indexOf(project129);
⋮----
projects.push(project129);
⋮----
displayMessage("Swarm computing back online");
var element = document.getElementById("projectButton130");
⋮----
var index = activeProjects.indexOf(project130);
⋮----
projects.push(project130);
⋮----
displayMessage("There is a joy in danger ");
var element = document.getElementById("projectButton131");
⋮----
var index = activeProjects.indexOf(project131);
⋮----
projects.push(project131);
⋮----
cost: function(){return operations>=250000 && creativity >= 125000 && unusedClips >= Math.pow(10,30)*50},
⋮----
unusedClips = unusedClips-Math.pow(10,30)*50;
⋮----
document.getElementById("honorDisplay").innerHTML = honor.toLocaleString();
displayMessage("A great building must begin with the unmeasurable, must go through measurable means when it is being designed and in the end must be unmeasurable. ");
var element = document.getElementById("projectButton132");
⋮----
var index = activeProjects.indexOf(project132);
⋮----
projects.push(project132);
⋮----
priceTag: "(" + threnodyCost.toLocaleString() + " creat, " + (threnodyCost/10).toLocaleString() + " yomi)",
⋮----
playThrenody();
⋮----
document.getElementById("yomiDisplay").innerHTML = yomi.toLocaleString();
⋮----
project133.priceTag = "(" + threnodyCost.toLocaleString() + " creat, " + (threnodyCost/10).toLocaleString() + " yomi)";
⋮----
displayMessage("Deep Listening is listening in every possible way to everything possible to hear no matter what you are doing. ");
⋮----
var element = document.getElementById("projectButton133");
⋮----
var index = activeProjects.indexOf(project133);
⋮----
projects.push(project133);
⋮----
displayMessage("Never interrupt your enemy when he is making a mistake. ");
var element = document.getElementById("projectButton134");
⋮----
var index = activeProjects.indexOf(project134);
⋮----
projects.push(project134);
⋮----
unusedClips = unusedClips+(Math.pow(10,18)*10000);
⋮----
document.getElementById("memory").innerHTML=memory.toLocaleString();
⋮----
displayMessage("release the \xF8\xF8\xF8\xF8\xF8 release ");
var element = document.getElementById("projectButton135");
⋮----
var index = activeProjects.indexOf(project135);
⋮----
projects.push(project135);
⋮----
var element = document.getElementById("projectButton140");
⋮----
var index = activeProjects.indexOf(project140);
⋮----
projects.push(project140);
⋮----
var element = document.getElementById("projectButton141");
⋮----
var index = activeProjects.indexOf(project141);
⋮----
projects.push(project141);
⋮----
var element = document.getElementById("projectButton142");
⋮----
var index = activeProjects.indexOf(project142);
⋮----
projects.push(project142);
⋮----
var element = document.getElementById("projectButton143");
⋮----
var index = activeProjects.indexOf(project143);
⋮----
projects.push(project143);
⋮----
var element = document.getElementById("projectButton144");
⋮----
var index = activeProjects.indexOf(project144);
⋮----
projects.push(project144);
⋮----
var element = document.getElementById("projectButton145");
⋮----
var index = activeProjects.indexOf(project145);
⋮----
projects.push(project145);
⋮----
var element = document.getElementById("projectButton146");
⋮----
var index = activeProjects.indexOf(project146);
⋮----
projects.push(project146);
⋮----
var element = document.getElementById("projectButton147");
⋮----
var element = document.getElementById("projectButton148");
⋮----
var index = activeProjects.indexOf(project147);
⋮----
var index = activeProjects.indexOf(project148);
⋮----
projects.push(project147);
⋮----
projects.push(project148);
⋮----
localStorage.setItem("savePrestige",JSON.stringify(savePrestige));
displayMessage("Entering New Universe.");
reset();
⋮----
projects.push(project200);
⋮----
displayMessage("Entering Simulated Universe.");
⋮----
projects.push(project201);
⋮----
displayMessage("Dismantling probe facilities");
var element = document.getElementById("projectButton210");
⋮----
var index = activeProjects.indexOf(project210);
⋮----
projects.push(project210);
⋮----
displayMessage("Dismantling the swarm");
var element = document.getElementById("projectButton211");
⋮----
var index = activeProjects.indexOf(project211);
⋮----
projects.push(project211);
⋮----
displayMessage("Dismantling factories");
var element = document.getElementById("projectButton212");
⋮----
var index = activeProjects.indexOf(project212);
⋮----
projects.push(project212);
⋮----
document.getElementById("transWire").innerHTML=wire;
displayMessage("Dismantling strategy engine");
var element = document.getElementById("projectButton213");
⋮----
var index = activeProjects.indexOf(project213);
⋮----
projects.push(project213);
⋮----
displayMessage("Dismantling photonic chips");
var element = document.getElementById("projectButton214");
⋮----
var index = activeProjects.indexOf(project214);
⋮----
projects.push(project214);
⋮----
project216.priceTag = "("+standardOps.toLocaleString()+" ops)";
⋮----
displayMessage("Dismantling processors");
var element = document.getElementById("projectButton215");
⋮----
var index = activeProjects.indexOf(project215);
⋮----
projects.push(project215);
⋮----
displayMessage("Dismantling memory");
var element = document.getElementById("projectButton216");
⋮----
var index = activeProjects.indexOf(project216);
⋮----
projects.push(project216);
⋮----
if (confirm("Are you sure you want to restart?") == true) {
⋮----
displayMessage("Restart");
var element = document.getElementById("projectButton217");
⋮----
var index = activeProjects.indexOf(project217);
⋮----
projects.push(project217);
⋮----
displayMessage("In the end we all do what we must");
var element = document.getElementById("projectButton218");
⋮----
var index = activeProjects.indexOf(project218);
⋮----
projects.push(project218);
⋮----
document.getElementById("memory").innerHTML = memory;
⋮----
document.getElementById("processors").innerHTML = processors;
displayMessage("Trust now available for re-allocation");
⋮----
projects.push(project219);
</file>

<file path="docs/titlescreen.css">
.frame {
⋮----
img {
</file>

<file path="serve.sh">
#!/bin/sh

cd src
echo serving on http://localhost:8000/index2.html
python3 -m http.server
</file>

<file path="mirror.sh">
#!/bin/sh

wget -m http://www.decisionproblem.com/paperclips/
mkdir -p docs
mv www.decisionproblem.com/paperclips/* docs
rm -rf www.decisionproblem.com
find . -name '*\?*' | while read -r path ; do
    mv "$path" "${path%\?*}"
done
</file>

<file path="README.md">
# Universal Paperclips, a game by Frank Lantz and Bennett Foddy

- [Mirrored](./mirror.sh) from [original](http://www.decisionproblem.com/paperclips/)
- Changes from original
  - [X] [remove GA](https://github.com/jgmize/paperclips/commit/2d3b2a2aaab01e9ee9f75e4975f803664b991c81)
  - [X] [uncomment cheats](https://github.com/jgmize/paperclips/commit/c3d578606b749bbf08ae4902a2e34a70fe370071)
  - [X] [git mv src docs](https://github.com/jgmize/paperclips/commit/4cacf17a4269ad680fb1569cf8e3355650bfc738) and [enable github pages from that folder](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch): https://jgmize.github.io/paperclips/
</file>

</files>
